'''
Created on Oct 7, 2013

@author: Spencer Graffe
'''
from PyQt4.QtCore import QUrl
from PyQt4.QtGui import QDialog, qApp
from PyQt4.QtWebKit import QWebPage

from lxml import html

import misc
from forms.export_to_html_ui import Ui_ExportToHtmlDialog

class ExportToHtmlDialog(QDialog):
    '''
    This dialog shows the status of the document being converted to an HTML
    file. It also has the code for the actual conversion.
    '''

    def __init__(self, document, filePath, assigner, parent=None):
        '''
        Constructor
        '''
        QDialog.__init__(self, parent)
        
        self.ui = Ui_ExportToHtmlDialog()
        self.ui.setupUi(self)
        
        self._document = document
        self._filePath = filePath
        self._assigner = assigner
        
        # States
        self._canceled = False
        self._loaded = False
        self._loadProgress = 0
        self._mathTypeset = False
        self._mathProgress = 0
        self._finished = False
        
        # Signals/slots
        self.ui.cancelButton.clicked.connect(self.cancelPressed)
        
    def closeEvent(self, status):
        self._canceled = True
        while not self._finished:
            pass
        
    def start(self):
        '''
        Starts the conversion process.
        '''
        
        def myLoadProgress(progress):
            print 'Load progress:', progress
            self._loadProgress = progress
        
        def myLoadFinished(isLoaded):
            print 'Document loaded!'
            self._loaded = True
        
        webpage = QWebPage()
        webpage.loadProgress.connect(myLoadProgress)
        webpage.loadFinished.connect(myLoadFinished)
        
        url = misc.temp_path('import')
        baseUrl = QUrl.fromLocalFile(url)
        webpage.mainFrame().setHtml(self._document.getMainPage(mathOutput='svg'), baseUrl)
        
        while not self._loaded and not self._canceled:
            qApp.processEvents()
        
        self.ui.label.setText('Typesetting math equations...')
        
        if not self._canceled:
            
            # Wait for the MathJax to typeset
            while not self._mathTypeset and not self._canceled:
                qApp.processEvents()
                progress = int(webpage.mainFrame().evaluateJavaScript(misc.js_command('GetMathTypesetProgress', [])).toInt()[0])
                self.ui.progressBar.setValue(progress)
                self._mathTypeset = webpage.mainFrame().evaluateJavaScript(misc.js_command('IsMathTypeset', [])).toBool()
                
            # If I haven't canceled yet, let's convert the document
            if not self._canceled:
                
                # Get the document back from the page, altered by MathJax
                myHtml = html.fromstring(unicode(webpage.mainFrame().evaluateJavaScript(misc.js_command('GetBodyHTML', [])).toString()))
                self._convertMathEquations(myHtml)
                self._embedImages(myHtml)
                
        self._finished = True
        #self.close()
        
    def _convertMathEquations(self, myHtml):
        '''
        Converts the Math equations inside (presumed to be SVGs generated by
        MathJax) into embedded PNGs with the math prose as alternate text.
        '''
        
        # Get all of my math equations
        equations = myHtml.xpath("//span[@class='mathmlEquation']")
        print 'Number of equations to convert:', len(equations)
        
        for i in range(len(equations)):
            self.ui.label.setText('Converting equation ' + str(i + 1) + ' of ' + str(len(equations)) + '...')
    
    def _embedImages(self, myHtml):
        '''
        It goes through all of the image tags, reads the original image it is
        referencing, and embeds the image data into the tag so that the
        document is portable.
        '''
        pass

    def cancelPressed(self):
        self.close()
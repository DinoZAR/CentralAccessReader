'''
Created on Jan 7, 2014

@author: Spencer Graffe
'''
import platform
import os
import subprocess
import traceback
from PyQt4.QtCore import QThread, pyqtSignal
import misc

class HeadlessRendererThread(QThread):
    '''
    Thread renders a CAR HTML page generated by a Document. It is implemented as
    a thread, allowing it to be run separatedly from the GUI.
    '''
    
    TEMP_ID = 0
    
    progress = pyqtSignal(int, unicode)
    
    def __init__(self, htmlContent):
        QThread.__init__(self)
        self._html = htmlContent
        self._renderedHtml = ''
        
        self._tempFolder = misc.temp_path('headless/' + str(HeadlessRendererThread.TEMP_ID))
        if not os.path.exists(self._tempFolder):
            os.makedirs(self._tempFolder)
        
        HeadlessRendererThread.TEMP_ID += 1
        
        self._running = True
    
    def stop(self):
        self._running = False
        
    def getRenderedHTML(self):
        return self._renderedHtml
            
    def run(self):
        
        self.progress.emit(0, 'Starting up...')
        
        # Write the HTML content to temp
        htmlPath = os.path.join(self._tempFolder, 'tmp.html')
        with open(htmlPath, 'w') as f:
            f.write(self._html)
        
        if platform.system() == 'Windows':
            phantomPath = misc.program_path('src/headless/phantomjs.exe')
        else:
            phantomPath = misc.program_path('src/headless/phantomjs_mac')
            
        # Write the JavaScript to same directory
        jsPath = misc.program_path('src/headless/render.js')
        with open(jsPath, 'r') as f:
            with open(os.path.join(self._tempFolder, os.path.basename(jsPath)), 'w') as f2:
                f2.write(f.read())
        
        ps = subprocess.Popen([phantomPath, os.path.basename(jsPath), os.path.basename(htmlPath)], stdout=subprocess.PIPE, cwd=os.path.dirname(htmlPath))
        
        grabbingNewHtml = False
        
        try:
            while ps.poll() is None:
                
                if not self._running:
                    try:
                        ps.terminate()
                    except Exception:
                        pass
                
                newStuff = ps.stdout.readline();                
                
                if not grabbingNewHtml:
                    checkString = '<{[The Math Typeset Progress Is:'
                    finishedCheckString = '[Exporting the document to HTML]'
                    if newStuff.find(checkString) == 0:
                        typesetProgress = newStuff[len(checkString):]
                        self.progress.emit(int(typesetProgress), 'Typesetting math equations...')
                    elif newStuff.find(finishedCheckString) == 0:
                        grabbingNewHtml = True
                        
                else:
                    self._renderedHtml += newStuff
        
        except Exception as e:
            print traceback.print_exc()
            ps.terminate()
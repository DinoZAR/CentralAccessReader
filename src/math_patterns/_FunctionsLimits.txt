// Limits

limitSyn = munderover(mrow(mover(mrow(l i m) bar)) mrow(? downArrow +) ?) -> 'the superior limit as {5}, decreases from {7}, of'

limitSyn = munderover(mrow(mover(mrow(l i m) bar)) mrow(? rightArrow ?) ?)-> 'the superior limit as {5}, approaches {7}, of'

limitSyn = munderover(mrow(mover(mrow(l i m) bar)) mrow(? upArrow ?) ?) -> 'the superior limit as {5}, increases to {7}, of'

limitSyn = munderover(mrow(mover(mrow(l i m) bar)) mrow(? diagTopRightArrow ?) ?) -> 'the superior limit as {5}, approaches {7} from the negative direction, of'

limitSyn = munderover(mrow(mover(mrow(l i m) bar)) mrow(? diagBotRightArrow ?) ?) -> 'the superior limit as {5}, approaches {7} from the positive direction, of'

limitSyn = munderover(mrow(mover(mrow(l i m) bar)) mrow(?) ?) -> 'the superior limit as {5}, of'



limitSyn = munderover(mrow(munder(mrow(l i m) bar)) mrow(? downArrow +) ?) -> 'the inferior limit as {5}, decreases from {7}, of'

limitSyn = munderover(mrow(munder(mrow(l i m) bar)) mrow(? rightArrow ?) ?)-> 'the inferior limit as {5}, approaches {7}, of'

limitSyn = munderover(mrow(munder(mrow(l i m) bar)) mrow(? upArrow ?) ?) -> 'the inferior limit as {5}, increases to {7}, of'

limitSyn = munderover(mrow(munder(mrow(l i m) bar)) mrow(? diagTopRightArrow ?) ?) -> 'the inferior limit as {5}, approaches {7} from the negative direction, of'

limitSyn = munderover(mrow(munder(mrow(l i m) bar)) mrow(? diagBotRightArrow ?) ?) -> 'the inferior limit as {5}, approaches {7} from the positive direction, of'

limitSyn = munderover(mrow(munder(mrow(l i m) bar)) mrow(?) ?) -> 'the inferior limit as {5}, of'



limitSyn = munderover(mrow(l i m) mrow(+ downArrow +) ?) -> 'the limit as {4}, decreases from {6}, of'
limitSyn = munderover(mrow(l i m) mrow(+ rightArrow +) ?)-> 'the limit as {4}, approaches {6}, of'
limitSyn = munderover(mrow(l i m) mrow(+ upArrow +) ?) -> 'the limit as {4}, increases to {6}, of'
limitSyn = munderover(mrow(l i m) mrow(? diagTopRightArrow ?) ?) -> 'the limit as {4}, approaches {6} from the negative direction, of'
limitSyn = munderover(mrow(l i m) mrow(? diagBotRightArrow ?) ?) -> 'the limit as {4}, approaches {6} from the positive direction, of'

limitSyn = munder(mrow( limit ) mrow(? downArrow ?)) -> 'the limit as {2}, decreases from {4}, of'
limitSyn = munder(mrow( limit ) mrow(? rightArrow ?))-> 'the limit as {2}, approaches {4}, of'
limitSyn = munder(mrow( limit ) mrow(? upArrow ?)) -> 'the limit as {2}, increases to {4}, of'
limitSyn = munder(mrow( limit ) mrow(? diagTopRightArrow ?)) -> 'the limit as {2}, approaches {4} from the negative direction, of'
limitSyn = munder(mrow( limit ) mrow(? diagBotRightArrow ?)) -> 'the limit as {2}, approaches {4} from the positive direction, of'

limitSyn = munder(mrow( limit ) mrow()) -> 'the limit of'



limitSyn = munder(mrow( mover( mrow( limit ) minus) )  mrow(? downArrow ?)) -> 'the superior limit as {3}, decreases from {5}, of'

limitSyn = munder(mrow( mover( mrow( limit ) minus) )  mrow(? rightArrow ?))-> 'the superior limit as {3}, approaches {5}, of'

limitSyn = munder(mrow( mover( mrow( limit ) minus) )  mrow(? upArrow ?)) -> 'the superior limit as {3}, increases to {5}, of'

limitSyn = munder(mrow( mover( mrow( limit ) minus) )  mrow(? diagTopRightArrow ?)) -> 'the superior limit as {3}, approaches {5} from the negative direction, of'

limitSyn = munder(mrow( mover( mrow( limit ) minus) )  mrow(? diagBotRightArrow ?)) -> 'the superior limit as {3}, approaches {5} from the positive direction, of'

limitSyn = munder(mrow( mover( mrow( limit ) minus) ) mrow()) -> 'the superior limit of'



limitSyn = munder(mrow( munder( mrow( limit ) minus) )  mrow(? downArrow ?)) -> 'the inferior limit as {3}, decreases from {5}, of'

limitSyn = munder(mrow( munder( mrow( limit ) minus) )  mrow(? rightArrow ?))-> 'the inferior limit as {3}, approaches {5}, of'

limitSyn = munder(mrow( munder( mrow( limit ) minus) )  mrow(? upArrow ?)) -> 'the inferior limit as {3}, increases to {5}, of'

limitSyn = munder(mrow( munder( mrow( limit ) minus) )  mrow(? diagTopRightArrow ?)) -> 'the inferior limit as {3}, approaches {5} from the negative direction, of'

limitSyn = munder(mrow( munder( mrow( limit ) minus) )  mrow(? diagBotRightArrow ?)) -> 'the inferior limit as {3}, approaches {5} from the positive direction, of'

limitSyn = munder(mrow( munder( mrow( limit ) minus) ) mrow()) -> 'the inferior limit of'



limitSyn = munder(mrow( mover( mrow( limit ) bar) )  mrow(? downArrow ?)) -> 'the superior limit as {3}, decreases from {5}, of'

limitSyn = munder(mrow( mover( mrow( limit ) bar) )  mrow(? rightArrow ?))-> 'the superior limit as {3}, approaches {5}, of'

limitSyn = munder(mrow( mover( mrow( limit ) bar) )  mrow(? upArrow ?)) -> 'the superior limit as {3}, increases to {5}, of'

limitSyn = munder(mrow( mover( mrow( limit ) bar) )  mrow(? diagTopRightArrow ?)) -> 'the superior limit as {3}, approaches {5} from the negative direction, of'

limitSyn = munder(mrow( mover( mrow( limit ) bar) )  mrow(? diagBotRightArrow ?)) -> 'the superior limit as {3}, approaches {5} from the positive direction, of'

limitSyn = munder(mrow( mover( mrow( limit ) bar) ) mrow()) -> 'the superior limit of'



limitSyn = munder(mrow( munder( mrow( limit ) bar) )  mrow(? downArrow ?)) -> 'the inferior limit as {3}, decreases from {5}, of'

limitSyn = munder(mrow( munder( mrow( limit ) bar) )  mrow(? rightArrow ?))-> 'the inferior limit as {3}, approaches {5}, of'

limitSyn = munder(mrow( munder( mrow( limit ) bar) )  mrow(? upArrow ?)) -> 'the inferior limit as {3}, increases to {5}, of'

limitSyn = munder(mrow( munder( mrow( limit ) bar) )  mrow(? diagTopRightArrow ?)) -> 'the inferior limit as {3}, approaches {5} from the negative direction, of'

limitSyn = munder(mrow( munder( mrow( limit ) bar) )  mrow(? diagBotRightArrow ?)) -> 'the inferior limit as {3}, approaches {5} from the positive direction, of'

limitSyn = munder(mrow( munder( mrow( limit ) bar) ) mrow()) -> 'the inferior limit of'



limitSyn = munderover(mrow(l i m) mrow(?) ?) -> 'the limit as {4}, of'

// Products and Unions

change = c h a n g e -> 'change'

intercept = i n t e r c e p t -> 'intercept'

in = i n -> 'in'

functionFofF = f openParen f openParen + closeParen closeParen -> 'function f of f of {5}'

functionFofG = f openParen g openParen + closeParen closeParen -> 'function f of g of {5}'

functionGofF = g openParen f openParen + closeParen closeParen -> 'function g of f of {5}'

functionGofG = g openParen g openParen + closeParen closeParen -> 'function g of g of {5}'

functionFofF = f composition f openParen + closeParen -> 'function f of f of {5}'

functionFofG = f composition g openParen + closeParen -> 'function f of g of {5}'

functionGofF = g composition f openParen + closeParen -> 'function g of f of {5}'

functionGofG = g composition g openParen + closeParen -> 'function g of g of {5}'

functionFofF = f composition f mfenced<open="(",close=")">( mrow( + )) -> 'function f of f of {4}'

functionFofG = f composition g mfenced<open="(",close=")">( mrow( + )) -> 'function f of g of {4}'

functionGofF = g composition f mfenced<open="(",close=")">( mrow( + )) -> 'function g of f of {4}'

functionGofG = g composition g mfenced<open="(",close=")">( mrow( + )) -> 'function g of g of {4}'

functionFofF = f composition f -> 'function f of f'

functionFofG = f composition g -> 'function f of g'

functionGofF = g composition f -> 'function g of f'

functionGofG = g composition g -> 'function g of g'

functionF = f openParen + closeParen -> 'function f of {3}'

functionG = g openParen + closeParen -> 'function g of {3}'

functionFofF = f mfenced<open="(",close=")">( mrow(f mfenced<open="(",close=")">( mrow( + )))) -> 'function g of f of {3}'

functionFofG = f mfenced<open="(",close=")">( mrow(g mfenced<open="(",close=")">( mrow( + )))) -> 'function g of f of {3}'

functionGofF = g mfenced<open="(",close=")">( mrow(f mfenced<open="(",close=")">( mrow( + )))) -> 'function g of f of {3}'

functionGofG = g mfenced<open="(",close=")">( mrow(g mfenced<open="(",close=")">( mrow( + )))) -> 'function g of f of {3}'

functionF = f mfenced<open="(",close=")">( mrow( + )) -> 'function f of {2}'

functionG = g mfenced<open="(",close=")">( mrow( + )) -> 'function g of {2}'



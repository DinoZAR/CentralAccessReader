// Products and Unions

limitSyn = munderover(mrow(limit) mrow(? rightArrow ?) ?) -> 'The limit, as {2} approaches {4}, of' 
limitSyn = munderover(mrow(limit) mrow(? downArrow ?)) -> 'the limit, as {2}, decreases from {4}, of'
limitSyn = munderover(mrow(limit) mrow(? rightArrow ?))-> 'the limit, as {2}, approaches {4}, of'
limitSyn = munderover(mrow(limit) mrow(? upArrow ?)) -> 'the limit, as {2}, increases to {4}, of'
limitSyn = munderover(mrow(limit) mrow(? diagTopRightArrow ?)) -> 'the limit, as {2}, approaches {4} from the negative direction, of'
limitSyn = munderover(mrow(limit) mrow(? diagBotRightArrow ?)) -> 'the limit, as {2}, approaches {4} from the positive direction, of'

change = c h a n g e -> 'change'
intercept = i n t e r c e p t -> 'intercept'
in = i n -> 'in'
functionFofF = f openParen f openParen + closeParen closeParen -> 'function f of f of {5}'
functionFofG = f openParen g openParen + closeParen closeParen -> 'function f of g of {5}'
functionGofF = g openParen f openParen + closeParen closeParen -> 'function g of f of {5}'
functionGofG = g openParen g openParen + closeParen closeParen -> 'function g of g of {5}'
functionFofF = f composition f openParen + closeParen -> 'function f of f of {5}'
functionFofG = f composition g openParen + closeParen -> 'function f of g of {5}'
functionGofF = g composition f openParen + closeParen -> 'function g of f of {5}'
functionGofG = g composition g openParen + closeParen -> 'function g of g of {5}'
functionFofF = f composition f mfenced<open="(",close=")">( mrow( + )) -> 'function f of f of {4}'
functionFofG = f composition g mfenced<open="(",close=")">( mrow( + )) -> 'function f of g of {4}'
functionGofF = g composition f mfenced<open="(",close=")">( mrow( + )) -> 'function g of f of {4}'
functionGofG = g composition g mfenced<open="(",close=")">( mrow( + )) -> 'function g of g of {4}'
functionFofF = f composition f -> 'function f of f'
functionFofG = f composition g -> 'function f of g'
functionGofF = g composition f -> 'function g of f'
functionGofG = g composition g -> 'function g of g'
functionF = f openParen + closeParen -> 'function f of {3}'
functionG = g openParen + closeParen -> 'function g of {3}'
functionFofF = f mfenced<open="(",close=")">( mrow(f mfenced<open="(",close=")">( mrow( + )))) -> 'function f of f of {3}'
functionFofG = f mfenced<open="(",close=")">( mrow(g mfenced<open="(",close=")">( mrow( + )))) -> 'function f of g of {3}'
functionGofF = g mfenced<open="(",close=")">( mrow(f mfenced<open="(",close=")">( mrow( + )))) -> 'function g of f of {3}'
functionGofG = g mfenced<open="(",close=")">( mrow(g mfenced<open="(",close=")">( mrow( + )))) -> 'function g of g of {3}'
functionF = f mfenced<open="(",close=")">( mrow( + )) -> 'function f of {2}'
functionG = g mfenced<open="(",close=")">( mrow( + )) -> 'function g of {2}'
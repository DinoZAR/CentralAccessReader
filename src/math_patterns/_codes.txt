// ------------
// Common Signs
// ------------
//
// --------------
// Order Matters!
// --------------
//
// The MathML parser is entirely sequential. Once it finds all cases of the
// current pattern and combines the different pattern's elements into singular
// entities, the pattern is no longer used in later matching. This means you
// must order patterns correctly to produce results you expect.
//
// -----------------
// Expected Ordering
// -----------------
//
// In order for patterns to match correctly, you should have patterns grouped
// and have those groups ordered in the following way: 
//
// 1. Symbol Code (like variables and Unicode)
// 2. Fraction-Based (like derivatives)
// 3. Over-Under (like sums and integrals)
// 4. Parenthetical Expressions (like square roots or things in parenthesis)
// 5. Generic Fallbacks (like fractions, superscripting, and subscripting)

//
// ------------------------------------------------------------------------------
// Symbol Code
// ------------------------------------------------------------------------------

// Unicodes and MathML codes for operators
limit = mi<mathvariant="normal">("lim") -> 'limit'
l = mi<mathvariant="normal">("l") -> 'l'
i = mi<mathvariant="normal">("i") -> 'i'
m = mi<mathvariant="normal">("m") -> 'm'
limit = l i m -> 'limit'
limit = mi<mathvariant="normal">("lim") -> 'limit'
l = mi<mathvariant="normal">("l") -> 'l'
i = mi<mathvariant="normal">("i") -> 'i'
m = mi<mathvariant="normal">("m") -> 'm'

ampersand = mi("&amp;") -> 'ampersand,'
approxEqual = mi("&#8771;") -> 'is approximately equal to'
approxEqualTilde = mi("&#8773;") -> 'is approximately equal to'
approxEqualTilde = mi("&#8773;") -> 'is approximately equal to'
apostrophe = mi("'") -> 'apostrophe'
approxEqual = mi("&#8776;") -> 'is approximately equal to'
ampersand = mo("&amp;") -> 'ampersand,'
approxEqual = mo("&#8771;") -> 'is approximately equal to'
approxEqualTilde = mo("&#8773;") -> 'is approximately equal to'
apostrophe = mo("'") -> 'apostrophe'
approxEqual = mo("&#8776;") -> 'is approximately equal to'

at = mi("@") -> 'at'
caret = mi("&#710;") -> 'caret,'
caret = mi("^") -> 'caret,'
at = mo("@") -> 'at'
caret = mo("&#710;") -> 'caret,'
caret = mo("^") -> 'caret,'

circleCross = mi("&#8855;") -> 'circled cross,'
circleDot = mi("&#8857;") -> 'circled dot,'
circlePlus = mi("&#8853;") -> 'circled plus,'
circleCross = mo("&#8855;") -> 'circled cross,'
circleDot = mo("&#8857;") -> 'circled dot,'
circlePlus = mo("&#8853;") -> 'circled plus,'

colon = mi(":") -> 'colon'
comma = mi(",") -> 'comma,'
doubleColon = colon colon -> 'double colon'
coproduct [integral] = mi("&#8720;") -> 'coproduct,'
composition = mi("&#8728;") -> 'composition of'
dagger = mi("&#8224;") -> 'dagger'
divideBack = mi("&#247;") -> 'divided by,'
divideBack = mi("\") -> 'divided by,'
divide = mi("/") -> 'divided by,'
dollarSign = mi("$") -> 'dollar sign,'
colon = mo(":") -> 'colon'
comma = mo(",") -> 'comma,'
doubleColon = colon colon -> 'double colon'
coproduct [integral] = mo("&#8720;") -> 'coproduct,'
composition = mo("&#8728;") -> 'composition of'
dagger = mo("&#8224;") -> 'dagger'
divideBack = mo("&#247;") -> 'divided by,'
divideBack = mo("\") -> 'divided by,'
divide = mo("/") -> 'divided by,'
dollarSign = mo("$") -> 'dollar sign,'

equals = mi("=") -> 'equals.'
equivalent = mi("&#8764;") -> 'is equivalent to'
greaterThanOrEqual = mi("&#8805;") -> 'is greater than or equal to'
lessThanOrEqual = mi("&#8804;") -> ' is less than or equal to'
equals = mo("=") -> 'equals.'
equivalent = mo("&#8764;") -> 'is equivalent to'
greaterThanOrEqual = mo("&#8805;") -> 'is greater than or equal to'
lessThanOrEqual = mo("&#8804;") -> ' is less than or equal to'

minus = mi("-") -> 'minus'
minus = mi("&#x2212;") -> 'minus'
minusPlus = mi("&#8723;") -> 'minus or plus'
minus = mo("-") -> 'minus'
minus = mo("&#x2212;") -> 'minus'
minusPlus = mo("&#8723;") -> 'minus or plus'

muchLessThan = mi("&#8810;") -> 'is much less than'
muchGreaterThan = mi("&#8811;") -> 'is much greater than'
muchLessThan = mo("&#8810;") -> 'is much less than'
muchGreaterThan = mo("&#8811;") -> 'is much greater than'

minus = mi("&#8722;") -> 'minus'
notEqual = mi("&#8800;") -> 'is not equal to'
percent = mi("%") -> 'percent'
minus = mo("&#8722;") -> 'minus'
notEqual = mo("&#8800;") -> 'is not equal to'
percent = mo("%") -> 'percent'

plusMinus = mi("&#xB1;") -> 'plus or minus'
product [integral] = mi("&#8719;") -> 'product'
questionMark = mi("?") -> 'question mark'
product [integral] = mi("&#8719;") -> 'product'
times = mi("*") -> 'asterisk'
timesCross = mi("&#215;") -> 'times'
times = mi("&#8727;") -> 'times'
plusMinus = mo("&#xB1;") -> 'plus or minus'
product [integral] = mo("&#8719;") -> 'product'
questionMark = mo("?") -> 'question mark'
product [integral] = mo("&#8719;") -> 'product'
times = mo("*") -> 'asterisk'
timesCross = mo("&#215;") -> 'times'
times = mo("&#8727;") -> 'times'


//Integrals
areaIntegral [integral] = mi("&#60946;") -> 'area integral'
areaIntegral [integral] = mi("&#8751;") -> 'area integral'
integralCon [integral] = mi("&#60945;") -> 'contour integral'
integralCon [integral] = mi("&#8750;") -> 'contour integral'
integralCon [integral] = mi("&#60945;") -> 'contour integral'
integralCon [integral] = mi("&#8750;") -> 'line integral'
//closedIntegral [integral] = mi("&#x222E;") -> 'closed integral'
integral [integral] = mi("&#8747;") -> 'integral'
integral [integral] = mi("&#8747;") -> 'integral'
integralDouble [integral] = mi("&#8748;") -> 'double integral'
integralDouble [integral] = mi("&#8748;") -> 'double integral'
integralTriple [integral] = mi("&#8749;") -> 'triple integral'
integralTriple [integral] = mi("&#8749;") -> 'triple integral'
integralCCW [integral] = mi("&#8755;") -> 'integral with a counter-clockwise circle'
integralCW [integral] = mi("&#8754;") -> 'integral with a clockwise circle'
volumeIntegral [integral] = mi("&#8752;") -> 'volume integral'
volumeIntegral [integral] = mi("&#60947;") -> 'volume integral'
areaIntegral [integral] = mo("&#60946;") -> 'area integral'
areaIntegral [integral] = mo("&#8751;") -> 'area integral'
integralCon [integral] = mo("&#60945;") -> 'contour integral'
integralCon [integral] = mo("&#8750;") -> 'contour integral'
integralCon [integral] = mo("&#60945;") -> 'contour integral'
integralCon [integral] = mo("&#8750;") -> 'line integral'
//closedIntegral [integral] = mo("&#x222E;") -> 'closed integral'
integral [integral] = mo("&#8747;") -> 'integral'
integral [integral] = mo("&#8747;") -> 'integral'
integralDouble [integral] = mo("&#8748;") -> 'double integral'
integralDouble [integral] = mo("&#8748;") -> 'double integral'
integralTriple [integral] = mo("&#8749;") -> 'triple integral'
integralTriple [integral] = mo("&#8749;") -> 'triple integral'
integralCCW [integral] = mo("&#8755;") -> 'integral with a counter-clockwise circle'
integralCW [integral] = mo("&#8754;") -> 'integral with a clockwise circle'
volumeIntegral [integral] = mo("&#8752;") -> 'volume integral'
volumeIntegral [integral] = mo("&#60947;") -> 'volume integral'

// Arrows
bothArrow [arrow] = mi("&#8596;") -> 'arrow pointing both left and right'
bothArrow [arrow] = mi("&#10231;") -> 'arrow pointing both left and right'
diagBothArrowLR [arrow] = mi("&#60165;") -> 'diagonal arrow pointing both bottom left and top right'
diagBothArrowRL [arrow] = mi("&#60166;") -> 'diagonal arrow pointing both top left and bottom right'
diagBotLeftArrow [arrow] = mi("&#8601;") -> 'diagonal arrow pointing from top right to bottom left'
diagBotRightArrow [arrow] = mi("&#8600;") -> 'diagonal arrow pointing from top left to bottom right'
diagTopRightArrow [arrow] = mi("&#8599;") -> 'diagonal arrow pointing from bottom left to top right'
diagTopLeftArrow [arrow] = mi("&#8598;") -> 'diagonal arrow pointing from bottom right to top left'
doubleDownArrow [arrow] = mi("&#8659;") -> 'double-arrow pointing down'
doubleLeftRightArrow [arrow] = mi("&#8660;") -> 'double-arrow pointing both left and right'
doubleLeftArrow [arrow] = mi("&#8656;") -> 'double-arrow pointing left'
doubleRightArrow [arrow] = mi("&#8658;") -> 'double-arrow pointing right'
doubleUpArrow [arrow] = mi("&#8657;") -> 'double-arrow pointing up'
doubleUpDownArrow [arrow] = mi("&#8661;") -> 'double-arrow pointing both up and down'
downArrow [arrow] = mi("&#8595;") -> 'arrow pointing down'
downLeftArrow [arrow] = mi("&#8629;") -> 'arrow pointing down then left'
dualArrows [arrow] = mi("&#8644;") -> 'right-pointing arrow atop a left-pointing arrow'
dualArrowsBigTop [arrow] = mi("&#60161;") -> 'right-pointing arrow atop a small left-pointing arrow'
dualArrowsSmallTop [arrow] = mi("&#60162;") -> 'small right-pointing arrow atop a left-pointing arrow'
dualHarpoons [arrow] = mi("&#8652;") -> 'right-pointing harpoon above a left-pointing harpoon'
dualHarpoonsBigTop [arrow] = mi("&#60163;") -> 'right-pointing harpoon above a small left-pointing harpoon'
dualHarpoonsSmallTop [arrow] = mi("&#60164;") -> 'small right-pointing harpoon above a left-pointing harpoon'
leftArrow [arrow] = mi("&#8592;") -> 'left-pointing arrow'
leftHarpoon [arrow] = mi("&#8636;") -> 'left-pointing harpoon'
leftHarpoon [arrow] = mi("&#8637;") -> 'left-pointing harpoon'
rightArrow [arrow] = mi("&#8594;") -> 'right-pointing arrow'
rightArrowBar [arrow] = mi("&#8614;") -> 'right-pointing arrow originating from a vertical bar'
rightHarpoon [arrow] = mi("&#8640;") -> 'right-pointing harpoon'
rightHarpoon [arrow] = mi("&#8641;") -> 'right-pointing harpoon'
upArrow [arrow] = mi("&#8593;") -> 'arrow pointing up'
upDownArrow [arrow] = mi("&#8597;") -> 'arrow point both up and down'
bothArrow [arrow] = mo("&#8596;") -> 'arrow pointing both left and right'
bothArrow [arrow] = mo("&#10231;") -> 'arrow pointing both left and right'
diagBothArrowLR [arrow] = mo("&#60165;") -> 'diagonal arrow pointing both bottom left and top right'
diagBothArrowRL [arrow] = mo("&#60166;") -> 'diagonal arrow pointing both top left and bottom right'
diagBotLeftArrow [arrow] = mo("&#8601;") -> 'diagonal arrow pointing from top right to bottom left'
diagBotRightArrow [arrow] = mo("&#8600;") -> 'diagonal arrow pointing from top left to bottom right'
diagTopRightArrow [arrow] = mo("&#8599;") -> 'diagonal arrow pointing from bottom left to top right'
diagTopLeftArrow [arrow] = mo("&#8598;") -> 'diagonal arrow pointing from bottom right to top left'
doubleDownArrow [arrow] = mo("&#8659;") -> 'double-arrow pointing down'
doubleLeftRightArrow [arrow] = mo("&#8660;") -> 'double-arrow pointing both left and right'
doubleLeftArrow [arrow] = mo("&#8656;") -> 'double-arrow pointing left'
doubleRightArrow [arrow] = mo("&#8658;") -> 'double-arrow pointing right'
doubleUpArrow [arrow] = mo("&#8657;") -> 'double-arrow pointing up'
doubleUpDownArrow [arrow] = mo("&#8661;") -> 'double-arrow pointing both up and down'
downArrow [arrow] = mo("&#8595;") -> 'arrow pointing down'
downLeftArrow [arrow] = mo("&#8629;") -> 'arrow pointing down then left'
dualArrows [arrow] = mo("&#8644;") -> 'right-pointing arrow atop a left-pointing arrow'
dualArrowsBigTop [arrow] = mo("&#60161;") -> 'right-pointing arrow atop a small left-pointing arrow'
dualArrowsSmallTop [arrow] = mo("&#60162;") -> 'small right-pointing arrow atop a left-pointing arrow'
dualHarpoons [arrow] = mo("&#8652;") -> 'right-pointing harpoon above a left-pointing harpoon'
dualHarpoonsBigTop [arrow] = mo("&#60163;") -> 'right-pointing harpoon above a small left-pointing harpoon'
dualHarpoonsSmallTop [arrow] = mo("&#60164;") -> 'small right-pointing harpoon above a left-pointing harpoon'
leftArrow [arrow] = mo("&#8592;") -> 'left-pointing arrow'
leftHarpoon [arrow] = mo("&#8636;") -> 'left-pointing harpoon'
leftHarpoon [arrow] = mo("&#8637;") -> 'left-pointing harpoon'
rightArrow [arrow] = mo("&#8594;") -> 'right-pointing arrow'
rightArrowBar [arrow] = mo("&#8614;") -> 'right-pointing arrow originating from a vertical bar'
rightHarpoon [arrow] = mo("&#8640;") -> 'right-pointing harpoon'
rightHarpoon [arrow] = mo("&#8641;") -> 'right-pointing harpoon'
upArrow [arrow] = mo("&#8593;") -> 'arrow pointing up'
upDownArrow [arrow] = mo("&#8597;") -> 'arrow point both up and down'

doubleVerticalBars = mi("&#8214;") -> 'double vertical bars,'
horizontalBraceDown = mi("&#65079;") -> 'horizontal brace opening downward,'
horizontalBraceUp = mi("&#65080;") -> 'horizontal brace opening upward,'
horizontalBracketDown = mi("&#9140;") -> 'horizontal bracket opening downward,'
horizontalBracketUp = mi("&#9141;") -> 'horizontal bracket opening upward,'
leftSquareBracket = mi("&#12314;") -> 'open square bracket,'
doubleVerticalBars = mo("&#8214;") -> 'double vertical bars,'
horizontalBraceDown = mo("&#65079;") -> 'horizontal brace opening downward,'
horizontalBraceUp = mo("&#65080;") -> 'horizontal brace opening upward,'
horizontalBracketDown = mo("&#9140;") -> 'horizontal bracket opening downward,'
horizontalBracketUp = mo("&#9141;") -> 'horizontal bracket opening upward,'
leftSquareBracket = mo("&#12314;") -> 'open square bracket,'

openParen = mi("(") -> 'open parentheses,'
openParen = mo("(") -> 'open parentheses,'

rightSquareBracket = mi("&#12315;") -> 'close square bracket,'
rightSquareBracket = mo("&#12315;") -> 'close square bracket,'

verticalBar = mi("|") -> 'vertical bar,'
verticalBar = mo("|") -> 'vertical bar,'

// Primes and Dots
backPrime = mi("&#8245;") -> 'back prime,'
bullet = mi("&#8729;") -> 'times'
doubleDot = mi("&#776;") -> 'double dot,'
doublePrime = mi("&#8243;") -> 'double prime,'
prime = mi("&#8242;") -> 'prime,'
quadDot = mi("&#8412;") -> 'quad dot,'
tripleDot = mi("&#8411;") -> 'triple dot,'
triplePrime = mi("&#8244;") -> 'triple prime,'
backPrime = mo("&#8245;") -> 'back prime,'
bullet = mo("&#8729;") -> 'times'
doubleDot = mo("&#776;") -> 'double dot,'
doublePrime = mo("&#8243;") -> 'double prime,'
prime = mo("&#8242;") -> 'prime,'
quadDot = mo("&#8412;") -> 'quad dot,'
tripleDot = mo("&#8411;") -> 'triple dot,'
triplePrime = mo("&#8244;") -> 'triple prime,'


// Geometric Symbols
angle = mi("&#8736;") -> 'angle,'
angle = mi("&#8737;") -> 'measured angle,'
angle = mi("&#8738;") -> 'spherical angle,'
arc = mi("&#8994;") -> 'arc,'
arc = mi("&#8995;") -> 'arc,'
bar = mi("&#175;") -> 'bar,'
bar = mi("_") -> 'bar,'
circle = mi("&#9675;") -> 'circle,'
colon = mi("&#8758;") -> 'colon'
defEqual = mi("&#8797;") -> 'equal to by definition,'
degree = mi("&#176;") -> 'degrees,'
degree = mi("&#176;") -> 'degrees,'
deltaEqual = mi("&#8796;") -> 'Delta equal to'
filledTriangle = mi("&#9650;") -> 'filled triangle,'
joint = mi("&#65081;") -> 'joint,'
measured = mi("&#8798;") -> 'measured by'
multimap = mi("&#8888;") -> 'multimap,'
parallel = mi("&#8741;") -> 'parallel to,'
parallelogram = mi("&#9649;") -> 'parallelogram,'
parallelogram = mi("&#9645;") -> 'parallelogram,'
tortoiseShellBracket = mi("&#65081;") -> 'horizontal tortoise shell bracket opening downward,'
triangle = mi("&#9651;") -> 'triangle,'
angle = mo("&#8736;") -> 'angle,'
angle = mo("&#8737;") -> 'measured angle,'
angle = mo("&#8738;") -> 'spherical angle,'
arc = mo("&#8994;") -> 'arc,'
arc = mo("&#8995;") -> 'arc,'
bar = mo("&#175;") -> 'bar,'
bar = mo("_") -> 'bar,'
circle = mo("&#9675;") -> 'circle,'
colon = mo("&#8758;") -> 'colon'
defEqual = mo("&#8797;") -> 'equal to by definition,'
degree = mo("&#176;") -> 'degrees,'
degree = mo("&#176;") -> 'degrees,'
deltaEqual = mo("&#8796;") -> 'Delta equal to'
filledTriangle = mo("&#9650;") -> 'filled triangle,'
joint = mo("&#65081;") -> 'joint,'
measured = mo("&#8798;") -> 'measured by'
multimap = mo("&#8888;") -> 'multimap,'
parallel = mo("&#8741;") -> 'parallel to,'
parallelogram = mo("&#9649;") -> 'parallelogram,'
parallelogram = mo("&#9645;") -> 'parallelogram,'
tortoiseShellBracket = mo("&#65081;") -> 'horizontal tortoise shell bracket opening downward,'
triangle = mo("&#9651;") -> 'triangle,'

// Logic
approachesLimit = mi("&#8784;") -> 'approaches the limit of,'
conjunction = mi("&#8896;") -> 'conjunction'
contraCode = upArrow upArrow downArrow downArrow leftArrow rightArrow leftArrow rightArrow -> 'secret contra code for extra life'
deltaEqual = mi("&#8796;") -> 'delta equal to,'
disjunction = mi("&#8897;") -> 'disjuction'
doubleSubSet = mi("&#8912;") -> 'is a double subset of,'
doubleSuperSet = mi("&#8913;") -> 'is a double superset of,'
emptySet = mi("&#8709;") -> 'the empty set,'
estimates = mi("&#8793;") -> 'estimates,'
intersection [integral] = mi("&#8745;") -> 'intersection,'
intersection [integral] = mi("&#8898;") -> 'intersection'
multimapRight = mi("&#168;") -> 'right multimap,'
multisetUnion = mi("&#8846;") -> 'is a multiset union of,'
normalSubgroup = mi("&#8882;") -> 'is normal subgroup of,'
notSubset = mi("&#8836;") -> 'is not a subset of,'
notSubNorEq = mi("&#59970;") -> 'not a subset of nor equal to,'
notSupNorEq = mi("&#59971;") -> 'not a superset of nor equal to,'
precedes = mi("&#8826;") -> 'precedes,'
proportional = mi("&#8733;") -> 'proportional to,'
semicolon = mi(";") -> 'semicolon'
squareImage = mi("&#8849;") -> 'is a square image of or equal to,'
squareOriginal = mi("&#8850;") -> 'is a square original of or equal to,'
subsetRight = mi("&#8838;") -> 'is a subset of,'
subsetLeft = mi("&#8839;") -> 'is a subset of,'
succeeds = mi("&#8827;") -> 'succeeds,'
suchThat = mi("&#8717;") -> 'such that,'
union [integral] = mi("&#8746;") -> 'union,'
union [integral] = mi("&#8899;") -> 'union,'
approachesLimit = mo("&#8784;") -> 'approaches the limit of,'
conjunction = mo("&#8896;") -> 'conjunction'
deltaEqual = mo("&#8796;") -> 'delta equal to,'
disjunction = mo("&#8897;") -> 'disjuction'
doubleSubSet = mo("&#8912;") -> 'is a double subset of,'
doubleSuperSet = mo("&#8913;") -> 'is a double superset of,'
emptySet = mo("&#8709;") -> 'the empty set,'
estimates = mo("&#8793;") -> 'estimates,'
intersection [integral] = mo("&#8745;") -> 'intersection,'
intersection [integral] = mo("&#8898;") -> 'intersection'
multimapRight = mo("&#168;") -> 'right multimap,'
multisetUnion = mo("&#8846;") -> 'is a multiset union of,'
normalSubgroup = mo("&#8882;") -> 'is normal subgroup of,'
notSubset = mo("&#8836;") -> 'is not a subset of,'
notSubNorEq = mo("&#59970;") -> 'not a subset of nor equal to,'
notSupNorEq = mo("&#59971;") -> 'not a superset of nor equal to,'
precedes = mo("&#8826;") -> 'precedes,'
proportional = mo("&#8733;") -> 'proportional to,'
semicolon = mo(";") -> 'semicolon'
squareImage = mo("&#8849;") -> 'is a square image of or equal to,'
squareOriginal = mo("&#8850;") -> 'is a square original of or equal to,'
subsetRight = mo("&#8838;") -> 'is a subset of,'
subsetLeft = mo("&#8839;") -> 'is a subset of,'
succeeds = mo("&#8827;") -> 'succeeds,'
suchThat = mo("&#8717;") -> 'such that,'
union [integral] = mo("&#8746;") -> 'union,'
union [integral] = mo("&#8899;") -> 'union,'


// Periods And Spaces
comma = mi(",") -> ','
comma = mo(",") -> ','
endPeriod = mo(".") -> ''
point = mi(".") -> 'point'
spaceWorking = mi("&#8203;") -> ' '
empty = mi("&#160;") -> ' '
empty = mi("&#8195;") -> ' '
space = mi("&#8196;") -> ' '
space = mi("&#8198;") -> ' '
space = mi("&#8201;") -> ' '
space = mi("&#8202;") -> ' '
space = mi("&#8203;") -> ' '
space = mi("&#8289;") -> ' '
spaceWorking = mo("&#8203;") -> ' '
empty = mo("&#160;") -> ' '
empty = mo("&#8195;") -> ' '
space = mo("&#8196;") -> ' '
space = mo("&#8198;") -> ' '
space = mo("&#8201;") -> ' '
space = mo("&#8202;") -> ' '
space = mo("&#8203;") -> ' '
space = mo("&#8289;") -> ' '

// Letters
J [variable] = mi<mathvariant="script">("J") -> 'mathematical script cap J'
J [variable] = mi<mathvariant="script">("J") -> 'mathematical script cap J'

a [variable] = mi("a") -> '"a"'
b [variable] = mi("b") -> ', "b"'
c [variable] = mi("c") -> '"c"'
d [variable] = mi("d") -> '"d"'
f [variable] = mi("f") -> '"f"'
g [variable] = mi("g") -> '"g"'
h [variable] = mi("h") -> '"h"'
j [variable] = mi("j") -> '"j"'
k [variable] = mi("k") -> '"k"'
l [variable] = mi("l") -> '"l"'
m [variable] = mi("m") -> '"m"'
n [variable] = mi("n") -> '"n"'
o [variable] = mi("o") -> '"o"'
p [variable] = mi("p") -> '"p"'
q [variable] = mi("q") -> '"q"'
r [variable] = mi("r") -> '"r"'
s [variable] = mi("s") -> '"s"'
t [variable] = mi("t") -> '"t"'
u [variable] = mi("u") -> '"u"'
v [variable] = mi("v") -> '"v"'
w [variable] = mi("w") -> '"w"'
x [variable] = mi("x") -> '"x"'
y [variable] = mi("y") -> '"why"'
z [variable] = mi("z") -> '"z"'
a [variable] = mo("a") -> '"a"'
b [variable] = mo("b") -> ', "b"'
c [variable] = mo("c") -> '"c"'
d [variable] = mo("d") -> '"d"'
f [variable] = mo("f") -> '"f"'
g [variable] = mo("g") -> '"g"'
h [variable] = mo("h") -> '"h"'
j [variable] = mo("j") -> '"j"'
k [variable] = mo("k") -> '"k"'
l [variable] = mo("l") -> '"l"'
m [variable] = mo("m") -> '"m"'
n [variable] = mo("n") -> '"n"'
o [variable] = mo("o") -> '"o"'
p [variable] = mo("p") -> '"p"'
q [variable] = mo("q") -> '"q"'
r [variable] = mo("r") -> '"r"'
s [variable] = mo("s") -> '"s"'
t [variable] = mo("t") -> '"t"'
u [variable] = mo("u") -> '"u"'
v [variable] = mo("v") -> '"v"'
w [variable] = mo("w") -> '"w"'
x [variable] = mo("x") -> '"x"'
y [variable] = mo("y") -> '"why"'
z [variable] = mo("z") -> '"z"'

A [variable] = mo("A") -> '"cap A"'
B [variable] = mo("B") -> '"cap B"'
C [variable] = mo("C") -> '"cap C"'
D [variable] = mo("D") -> '"cap D"'
E [variable] = mo("E") -> '"cap E"'
F [variable] = mo("F") -> '"cap F"'
G [variable] = mo("G") -> '"cap G"'
H [variable] = mo("H") -> '"cap H"'
I [variable] = mo("I") -> '"cap I"'
J [variable] = mo("J") -> '"cap J"'
K [variable] = mo("K") -> '"cap K"'
L [variable] = mo("L") -> '"cap L"'
M [variable] = mo("M") -> '"cap M"'
N [variable] = mo("N") -> '"cap N"'
O [variable] = mo("O") -> '"cap O"'
P [variable] = mo("P") -> '"cap P"'
Q [variable] = mo("Q") -> '"cap Q"'
R [variable] = mo("R") -> '"cap R"'
S [variable] = mo("S") -> '"cap S"'
T [variable] = mo("T") -> '"cap T"'
U [variable] = mo("U") -> '"cap U"'
V [variable] = mo("V") -> '"cap V"'
W [variable] = mo("W") -> '"cap W"'
X [variable] = mo("X") -> '"cap X"'
Y [variable] = mo("Y") -> '"cap Y"'
Z [variable] = mo("Z") -> '"cap Z"'
A [variable] = mi("A") -> '"cap A"'
B [variable] = mi("B") -> '"cap B"'
C [variable] = mi("C") -> '"cap C"'
D [variable] = mi("D") -> '"cap D"'
E [variable] = mi("E") -> '"cap E"'
F [variable] = mi("F") -> '"cap F"'
G [variable] = mi("G") -> '"cap G"'
H [variable] = mi("H") -> '"cap H"'
I [variable] = mi("I") -> '"cap I"'
J [variable] = mi("J") -> '"cap J"'
K [variable] = mi("K") -> '"cap K"'
L [variable] = mi("L") -> '"cap L"'
M [variable] = mi("M") -> '"cap M"'
N [variable] = mi("N") -> '"cap N"'
O [variable] = mi("O") -> '"cap O"'
P [variable] = mi("P") -> '"cap P"'
Q [variable] = mi("Q") -> '"cap Q"'
R [variable] = mi("R") -> '"cap R"'
S [variable] = mi("S") -> '"cap S"'
T [variable] = mi("T") -> '"cap T"'
U [variable] = mi("U") -> '"cap U"'
V [variable] = mi("V") -> '"cap V"'
W [variable] = mi("W") -> '"cap W"'
X [variable] = mi("X") -> '"cap X"'
Y [variable] = mi("Y") -> '"cap Y"'
Z [variable] = mi("Z") -> '"cap Z"'

// Greek letters
alpha [variable] = mi("&#945;") -> 'alpha'
beta [variable] = mi("&#946;") -> 'beta'
chi [variable] = mi("&#967;") -> 'chi'
del [variable] = mi("&#8711;") -> 'del'
del [variable] = mi("&#8711;") -> 'nabla'
delta [variable] = mi("&#948;") -> 'delta'
delta [variable] = mi("&#8706;") -> 'partial derivitive'
delta [variable] = mi("&#8706;") -> 'partial derivative'
epsilon [variable] = mi("&#949;") -> 'epsilon'
epsilon [variable] = mi("&#1013;") -> 'epsilon'
eta [variable] = mi("&#951;") -> 'eta'
gamma [variable] = mi("&#947;") -> 'gamma'
iota [variable] = mi("&#953;") -> 'iota'
kappa [variable] = mi("&#954;") -> 'kappa'
lambda [variable] = mi("&#955;") -> 'lambda'
mu [variable] = mi("&#956;") -> 'mu'
nu [variable] = mi("&#957;") -> 'nu'
omega [variable] = mi("&#969;") -> 'omega'
omicron [variable] = mi("&#959;") -> 'omicron'
phi [variable] = mi("&#981;") -> 'phi'
phi [variable] = mi("&#966;") -> 'phi'
pi [variable] = mi("&#960;") -> 'pi'
pi [variable] = mi("&#982;") -> 'pi'
psi [variable] = mi("&#968;") -> 'psi'
rho [variable] = mi("&#961;") -> 'rho'
sigma [variable] = mi("&#962;") -> 'sigma'
sigma [variable] = mi("&#963;") -> 'sigma'
tau [variable] = mi("&#964;") -> 'tau'
theta [variable] = mi("&#952;") -> 'theta'
theta [variable] = mi("&#977;") -> 'theta'
upsilon [variable] = mi("&#965;") -> 'upsilon'
xi [variable] = mi("&#958;") -> 'xi'
zeta [variable] = mi("&#950;") -> 'zeta'
alpha [variable] = mo("&#945;") -> 'alpha'
beta [variable] = mo("&#946;") -> 'beta'
chi [variable] = mo("&#967;") -> 'chi'
del [variable] = mo("&#8711;") -> 'del'
del [variable] = mo("&#8711;") -> 'nabla'
delta [variable] = mo("&#948;") -> 'delta'
delta [variable] = mo("&#8706;") -> 'partial derivitive'
delta [variable] = mo("&#8706;") -> 'partial derivative'
epsilon [variable] = mo("&#949;") -> 'epsilon'
epsilon [variable] = mo("&#1013;") -> 'epsilon'
eta [variable] = mo("&#951;") -> 'eta'
gamma [variable] = mo("&#947;") -> 'gamma'
iota [variable] = mo("&#953;") -> 'iota'
kappa [variable] = mo("&#954;") -> 'kappa'
lambda [variable] = mo("&#955;") -> 'lambda'
mu [variable] = mo("&#956;") -> 'mu'
nu [variable] = mo("&#957;") -> 'nu'
omega [variable] = mo("&#969;") -> 'omega'
omicron [variable] = mo("&#959;") -> 'omicron'
phi [variable] = mo("&#981;") -> 'phi'
phi [variable] = mo("&#966;") -> 'phi'
pi [variable] = mo("&#960;") -> 'pi'
pi [variable] = mo("&#982;") -> 'pi'
psi [variable] = mo("&#968;") -> 'psi'
rho [variable] = mo("&#961;") -> 'rho'
sigma [variable] = mo("&#962;") -> 'sigma'
sigma [variable] = mo("&#963;") -> 'sigma'
tau [variable] = mo("&#964;") -> 'tau'
theta [variable] = mo("&#952;") -> 'theta'
theta [variable] = mo("&#977;") -> 'theta'
upsilon [variable] = mo("&#965;") -> 'upsilon'
xi [variable] = mo("&#958;") -> 'xi'
zeta [variable] = mo("&#950;") -> 'zeta'

Alpha [variable] = mo("&#913;") -> 'cap alpha'
Beta [variable] = mo("&#914;") -> 'cap beta'
Chi [variable] = mo("&#935;") -> 'cap chi'
Delta [variable] = mo("&#916;") -> 'cap delta'
Epsilon [variable] = mo("&#917;") -> 'cap epsilon'
Eta [variable] = mo("&#919;") -> 'cap eta'
Gamma [variable] = mo("&#915;") -> 'cap gamma'
Iota [variable] = mo("&#921;") -> 'cap iota'
Kappa [variable] = mo("&#922;") -> 'cap kappa'
Lambda [variable] = mo("&#923;") -> 'cap lambda'
Mu [variable] = mo("&#924;") -> 'cap mu'
Nu [variable] = mo("&#925;") -> 'cap nu'
Omega [variable] = mo("&#937;") -> 'cap omega'
Omicron [variable] = mo("&#927;") -> 'cap omicron'
Phi [variable] = mo("&#934;") -> 'cap phi'
Pi [variable] = mo("&#928;") -> 'cap pi'
PiBig [variable] = mo("&#8719;") -> 'cap big pi'
PiBigFlipped = mo("&#8720;") -> 'cap flipped big pi'
Psi [variable] = mo("&#936;") -> 'cap psi'
Rho [variable] = mo("&#929;") -> 'cap rho'
Sigma [variable] = mo("&#931;") -> 'cap sigma'
SigmaBig = mo("&#8721;") -> 'cap sigma'
SigmaBig = mo("&#8721;") -> 'cap sigma'
Tau [variable] = mo("&#932;") -> 'cap tau'
Theta [variable] = mo("&#920;") -> 'cap theta'
Upsilon [variable] = mo("&#933;") -> 'cap upsilon'
UpsilonHook [vaiable] = mo("&#978;") -> 'cap upsilon with hook'
Xi [variable] = mo("&#926;") -> 'cap xi'
Zeta [variable] = mo("&#918;") -> 'cap zeta'
Alpha [variable] = mi("&#913;") -> 'cap alpha'
Beta [variable] = mi("&#914;") -> 'cap beta'
Chi [variable] = mi("&#935;") -> 'cap chi'
Delta [variable] = mi("&#916;") -> 'cap delta'
Epsilon [variable] = mi("&#917;") -> 'cap epsilon'
Eta [variable] = mi("&#919;") -> 'cap eta'
Gamma [variable] = mi("&#915;") -> 'cap gamma'
Iota [variable] = mi("&#921;") -> 'cap iota'
Kappa [variable] = mi("&#922;") -> 'cap kappa'
Lambda [variable] = mi("&#923;") -> 'cap lambda'
Mu [variable] = mi("&#924;") -> 'cap mu'
Nu [variable] = mi("&#925;") -> 'cap nu'
Omega [variable] = mi("&#937;") -> 'cap omega'
Omicron [variable] = mi("&#927;") -> 'cap omicron'
Phi [variable] = mi("&#934;") -> 'cap phi'
Pi [variable] = mi("&#928;") -> 'cap pi'
PiBig [variable] = mi("&#8719;") -> 'cap big pi'
PiBigFlipped = mi("&#8720;") -> 'cap flipped big pi'
Psi [variable] = mi("&#936;") -> 'cap psi'
Rho [variable] = mi("&#929;") -> 'cap rho'
Sigma [variable] = mi("&#931;") -> 'cap sigma'
SigmaBig = mi("&#8721;") -> 'cap sigma'
Tau [variable] = mi("&#932;") -> 'cap tau'
Theta [variable] = mi("&#920;") -> 'cap theta'
Upsilon [variable] = mi("&#933;") -> 'cap upsilon'
UpsilonHook [vaiable] = mi("&#978;") -> 'cap upsilon with hook'
Xi [variable] = mi("&#926;") -> 'cap xi'
Zeta [variable] = mi("&#918;") -> 'cap zeta'


//Rarely used symbols
ahlef = mi("&#8501;") -> 'ahlef'
bet = mi("&#8502;") -> 'bet'
bbcapC = mi("&#8450;") -> 'blackboard cap C'
bbcapF = mi("&#61573;") -> 'blackboard cap F'
bbcapN = mi("&#8469;") -> 'blackboard cap N'
bbcapQ = mi("&#8474;") -> 'blackboard cap Q'
bbcapS = mi("&#61586;") -> 'blackboard cap S'
bbcapZ = mi("&#8484;") -> 'blackboard cap Z'
bblowK = mi("&#61604;") -> 'blackboard k'
frakturA = mi("&#61440;") -> 'Fraktur cap A'
frakturI = mi("&#8465;") -> 'Fraktur cap I'
frakturM = mi("&#61452;") -> 'Fraktur cap M'
frakturR = mi("&#8476;") -> 'Fraktur cap R'
invertedOhm = mi("&#8487;") -> 'inverted Ohm sign'
planckConsOverTwoPi = mi("&#8463;") -> 'Planck constant over two pi'
scriptI = mi("&#8467;") -> 'Script I'
scriptR = mi("&#8475;") -> 'Script R'
smallLamExtraStroke = mi("&#411;") -> 'Small lambda with extra stroke'
weierstrassEll = mi("&#8472;") -> 'Weierstrass ellipsis'
ahlef = mo("&#8501;") -> 'ahlef'
bet = mo("&#8502;") -> 'bet'
bbcapC = mo("&#8450;") -> 'blackboard cap C'
bbcapF = mo("&#61573;") -> 'blackboard cap F'
bbcapN = mo("&#8469;") -> 'blackboard cap N'
bbcapQ = mo("&#8474;") -> 'blackboard cap Q'
bbcapS = mo("&#61586;") -> 'blackboard cap S'
bbcapZ = mo("&#8484;") -> 'blackboard cap Z'
bblowK = mo("&#61604;") -> 'blackboard k'
frakturA = mo("&#61440;") -> 'Fraktur cap A'
frakturI = mo("&#8465;") -> 'Fraktur cap I'
frakturM = mo("&#61452;") -> 'Fraktur cap M'
frakturR = mo("&#8476;") -> 'Fraktur cap R'
invertedOhm = mo("&#8487;") -> 'inverted Ohm sign'
planckConsOverTwoPi = mo("&#8463;") -> 'Planck constant over two pi'
scriptI = mo("&#8467;") -> 'Script I'
scriptR = mo("&#8475;") -> 'Script R'
smallLamExtraStroke = mo("&#411;") -> 'Small lambda with extra stroke'
weierstrassEll = mo("&#8472;") -> 'Weierstrass ellipsis'


// Ellipses
diagonalBotLeftEllipsis = mi("&#8944;") -> 'diagonal bottom left top right ellipsis,'
diagonalTopLeftEllipsis = mi("&#8945;") -> 'diagonal top left bottom right ellipsis,'
ellipsis = mi("&#8230;") -> 'ellipsis,'
ellipsis = mi("&#8943;") -> 'ellipsis,'
verticalEllipsis = mi("&#8942;") -> 'vertical ellipsis,'
diagonalBotLeftEllipsis = mo("&#8944;") -> 'diagonal bottom left top right ellipsis,'
diagonalTopLeftEllipsis = mo("&#8945;") -> 'diagonal top left bottom right ellipsis,'
ellipsis = mo("&#8230;") -> 'ellipsis,'
ellipsis = mo("&#8943;") -> 'ellipsis,'
verticalEllipsis = mo("&#8942;") -> 'vertical ellipsis,'

// Text
text = mtext(?) -> '{1}'
blankSpace = minus minus -> 'blank'
diamond = mi("&#8900;") -> 'diamond,'
identical = mi("&#8801;") -> 'is identical to,'
identical = mo("&#8801;") -> 'is identical to,'
plus = mo("+") -> 'plus,'
summation = mi("&#8721;") -> 'summation,'
tilde = mo("&#732;") -> 'tilde,'
tilde = mo("~") -> 'tilde,'
tilde = mi("~") -> 'tilde,'
times = mi("&#8901;") -> 'times,'
times = mi("&#59791;") -> 'times,'

// Parentheses, Brackets, Braces, and Bars
closeBrace = mo("}") -> 'close brace,'
closeBracket = mo("]") -> ', close bracket,'
closeParen = mo(")") -> ', close parentheses,'
leftAngleBracket = mi("&#9001;") -> 'left-pointing angle bracket,'
leftAngleBracket = mo("&#9001;") -> 'left-pointing angle bracket,'
openBrace = mo("{") -> 'open brace,'
openBracket = mo("[") -> 'open bracket,'
rightAngleBracket = mi("&#9002;") -> 'right-pointing angle bracket,'
rightAngleBracket = mo("&#9002;") -> 'right-pointing angle bracket,'
bullet = mi("&#8226;") -> 'bullet,'
dot = mo("&#775;") -> 'dot,'
dot = mi("&#183;") -> 'times,'
perpendicular = mi("&#8869;") -> 'perpendicular to,'
square = mi("&#9633;") -> 'square,'

// Logic
and = mo("&#8743;") -> 'and,'
because = mo("&#8757;") -> 'because,'
compliment = mi("&#8705;") -> 'is a compliment of,'
compliment = mo("&#8705;") -> 'is a compliment of,'
containsMember = mo("&#8715;") -> 'contains as member'
containsNormalSubgroup = mi("&#8883;") -> 'contains as normal subgroup,'
doesNotExist = mo("&#8708;") -> 'there does not exist'
exists = mo("&#8707;") -> 'there exists,'
factorial = mo("!") -> 'factorial,'
forAll = mo("&#8704;") -> 'for all,'
greaterThan = mo("&gt;") -> 'is greater than,'
greaterThan = mi("&gt;") -> 'is greater than,'
increment = mo("&#8710;") -> 'increment'
isElement = mo("&#8712;") -> 'is an element of,'
isNotElement = mo("&#8713;") -> 'is not an element of,'
lessThan = mo("&lt;") -> 'is less than,'
lessThan = mi("&lt;") -> 'is less than,'
not = mo("&#172;") -> 'not,'
or = mo("&#8744;") -> 'or,'
properSubsetRight = mo("&#8834;") -> 'is a proper subset of,'
properSubsetLeft = mo("&#8835;") -> 'is a proper subset of,'
therefore = mo("&#8756;") -> 'therefore,'
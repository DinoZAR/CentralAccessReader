diamond = mi("&#8900;") -> 'diamond'
diamond = mo("&#8900;") -> 'diamond'
identical = mi("&#8801;") -> 'is identical to'
identical = mo("&#8801;") -> 'is identical to'
numberSign = mi("#") -> 'number sign'
numberSign = moi("#") -> 'number sign'
plus = mo("+") -> 'plus'
plus = mi("+") -> 'plus'
SigmaLone = mi("&#8721;") -> 'summation'
SigmaLone = mn("&#8721;") -> 'summation'
SigmaLone = mo("&#8721;") -> 'summation'
tilde = mo("&#732;") -> 'tilde'
tilde = mi("&#732;") -> 'tilde'
tilde = mo("~") -> 'tilde'
tilde = mi("~") -> 'tilde'
times = mi("&#8901;") -> 'times'
times = mi("&#59791;") -> 'times'
times = mo("&#8901;") -> 'times'
times = mo("&#59791;") -> 'times'

fourrootsym = mi("&#8732;") -> 'the fourth root of'
cuberootsym = mi("&#8731;") -> 'the cube root of'
squarerootsym = mi("&#8730;") -> 'the square root of'
fourrootsym = mo("&#8732;") -> 'the fourth root of'
cuberootsym = mo("&#8731;") -> 'the cube root of'
squarerootsym = mo("&#8730;") -> 'the square root of'

// Parentheses, Brackets, Braces, and Bars
closeBrace = mo("}") -> 'close brace,'
closeBracket = mo("]") -> ', close bracket,'
closeParen = mo(")") -> ', close parentheses,'
leftAngleBracket = mo("&#9001;") -> 'left-pointing angle bracket,'
openBrace = mo("{") -> 'open brace,'
openBracket = mo("[") -> 'open bracket,'
rightAngleBracket = mo("&#9002;") -> 'right-pointing angle bracket,'
bullet = mo("&#8226;") -> 'bullet,'
dot = mo("&#775;") -> 'dot,'
dot = mo("&#183;") -> 'times,'
perpendicular = mo("&#8869;") -> 'perpendicular to,'
square = mo("&#9633;") -> 'square,'
closeBrace = mi("}") -> 'close brace,'
closeBracket = mi("]") -> ', close bracket,'
closeParen = mi(")") -> ', close parentheses,'
leftAngleBracket = mi("&#9001;") -> 'left-pointing angle bracket,'
leftAngleBracket = mi("&#9001;") -> 'left-pointing angle bracket,'
openBrace = mi("{") -> 'open brace,'
openBracket = mi("[") -> 'open bracket,'
rightAngleBracket = mi("&#9002;") -> 'right-pointing angle bracket,'
bullet = mi("&#8226;") -> 'bullet,'
dot = mi("&#775;") -> 'dot,'
dot = mi("&#183;") -> 'times,'
perpendicular = mi("&#8869;") -> 'perpendicular to,'
square = mi("&#9633;") -> 'square,'

// Logic
and = mo("&#8743;") -> 'and'
because = mo("&#8757;") -> 'because'
compliment = mo("&#8705;") -> 'is a compliment of'
containsMember = mo("&#8715;") -> 'contains as member'
containsNormalSubgroup = mo("&#8883;") -> 'contains as normal subgroup'
doesNotExist = mo("&#8708;") -> 'there does not exist'
exists = mo("&#8707;") -> 'there exists'
factorial = mo("!") -> 'factorial,'
forAll = mo("&#8704;") -> 'for all,'
greaterThan = mo("&gt;") -> 'is greater than'
increment = mo("&#8710;") -> 'increment'
isElement = mo("&#8712;") -> 'is an element of'
isNotElement = mo("&#8713;") -> 'is not an element of'
lessThan = mo("&lt;") -> 'is less than'
not = mo("&#172;") -> 'not'
or = mo("&#8744;") -> 'or'
properSubsetRight = mo("&#8834;") -> 'is a proper subset of'
properSubsetLeft = mo("&#8835;") -> 'is a proper subset of'
therefore = mo("&#8756;") -> 'therefore'
and = mi("&#8743;") -> 'and'
because = mi("&#8757;") -> 'because'
compliment = mi("&#8705;") -> 'is a compliment of'
containsMember = mi("&#8715;") -> 'contains as member'
containsNormalSubgroup = mi("&#8883;") -> 'contains as normal subgroup'
doesNotExist = mi("&#8708;") -> 'there does not exist'
exists = mi("&#8707;") -> 'there exists'
factorial = mi("!") -> 'factorial,'
forAll = mi("&#8704;") -> 'for all,'
greaterThan = mi("&gt;") -> 'is greater than'
increment = mi("&#8710;") -> 'increment'
isElement = mi("&#8712;") -> 'is an element of'
isNotElement = mi("&#8713;") -> 'is not an element of'
lessThan = mi("&lt;") -> 'is less than'
not = mi("&#172;") -> 'not'
or = mi("&#8744;") -> 'or'
properSubsetRight = mi("&#8834;") -> 'is a proper subset of'
properSubsetLeft = mi("&#8835;") -> 'is a proper subset of'
therefore = mi("&#8756;") -> 'therefore'
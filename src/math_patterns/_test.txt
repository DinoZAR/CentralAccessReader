Page 33CHAPTER 2: ELEMENTARY PROGRAMMINGObjectives• To write Java programs to perform simple computations (§2.2).• To obtain input from the console using the Scanner class (§2.3).• To use identifiers to name variables, constants, methods, and classes (§2.4).• To use variables to store data (§§2.5–2.6).• To program with assignment statements and assignment expressions (§2.6).• To use constants to store permanent data (§2.7).• To name classes, methods, variables, and constants by following their naming conventions (§2.8).• To explore Java numeric primitive data types: byte, short, int, long, float, and double (§2.9.1).• To perform operations using operators +, -, *, /, and % (§2.9.2).• To perform exponent operations using Math.pow(a, b) (§2.9.3).• To write integer literals, floating-point literals, and literals in scientific notation (§2.10).• To write and evaluate numeric expressions (§2.11).• To obtain the current system time using System.currentTimeMillis() (§2.12).• To use augmented assignment operators (§2.13).• To distinguish between postincrement and preincrement and between postdecrement and predecrement (§2.14).• To cast the value of one type to another type (§2.15).• To describe the software development process and apply it to develop the loan payment program (§2.16).• To represent characters using the char type (§2.17).• To represent a string using the String type (§2.18).• To obtain input using the JOptionPane input dialog boxes (§2.19).Page 342.1 IntroductionKey PointThe focus of this chapter is on learning elementary programming techniques to solve problems.In Chapter 1 you learned how to create, compile, and run very basic Java programs. Now you will learn how to solve problems by writing programs. Through these problems, you will learn elementary programming using primitive data types, variables, constants, operators, expressions, and input and output.Suppose, for example, that you need to take out a student loan. Given the loan amount, loan term, and annual interest rate, can you write a program to compute the monthly payment and total payment? This chapter shows you how to write programs like this. Along the way, you learn the basic steps that go into analyzing a problem, designing a solution, and implementing the solution by creating a program.2.2 Writing a Simple ProgramKey PointWriting a program involves designing a strategy for solving the problem and then using a programming language to implement that strategy.Problem: Let’s first consider the simple problem of computing the area of a circle. How do we write a program for solving this problem?Writing a program involves designing algorithms and translating algorithms into pro-gramming instructions, or code.Algorithm: An algorithm describes how a problem is solved by list¬ing the actions that need to be taken and the order of their execution. Algorithms can help the programmer plan a program before writing it in a programming language.Pseudocode: Algorithms can be described in natural languages or in pseudocode (natural language mixed with some programming code). The algorithm for calculating the area of a circle can be described as follows:1. Read in the circle’s radius.2. Compute the area using the following formula: area = radius * radius * π3. Display the result.TipIt’s always good practice to outline your program (or its underlying problem) in the form of an algorithm before you begin coding.When you code—that is, when you write a program—you translate an algorithm into a program. You already know that every Java program begins with a class definition in which the keyword class is followed by the class name. Assume that you have chosen ComputeArea as the class name. The outline of the program would look like this: public class ComputeArea {  // Details to be given later }As you know, every Java program must have a main method where program execution begins. The program is then expanded as follows: public class ComputeArea {  public static void main(String[] args) {    // Step 1: Read in radius   // Step 2: Compute area   Page 35   // Step 3: Display the area  } }The program needs to read the radius entered by the user from the keyboard. This raises two important issues:• Reading the radius.• Storing the radius in the program.Variable: Let’s address the second issue first. In order to store the radius, the program needs to declare a symbol called a variable. A variable represents a value stored in the computer’s memory.Descriptive names: Rather than using x and y as variable names, choose descriptive names: in this case, radius for radius, and area for area. To let the compiler know what radius and area are, specify their data types.Data type: That is the kind of the data stored in a variable, whether integer, floating-point number, or something else.Declare variables: This is known as declaring variables.Floating-point number: Java provides simple data types for representing integers, floating-point numbers (i.e., numbers with a decimal point), characters, and Boolean types.Primitive data types: These types are known as primitive data types or fundamental types.Declare radius and area as double-precision floating-point numbers. The program can be expanded as follows: public class ComputeArea {  public static void main(String[] args) {    double radius;   double area;   // Step 1: Read in radius    // Step 2: Compute area   // Step 3: Display the area  } }The program declares radius and area as variables. The reserved word double indicates that radius and area are double-precision floating-point values stored in the computer.The first step is to prompt the user to designate the circle’s radius. You will learn how to prompt the user for information shortly. For now, to learn how variables work, you can assign a fixed value to radius in the program as you write the code; later, you’ll modify the program to prompt the user for this value.The second step is to compute area by assigning the result of the expression radius * radius * 3.14159 to area.In the final step, the program will display the value of area on the console by using the System.out.println method.Listing 2.1 shows the complete program, and a sample run of the program is shown in Figure 2.1.LISTING 2.1 ComputeArea.java1 public class ComputeArea {2  public static void main(String[] args) {3   double radius; // Declare radius4   double area; // Declare area56   // Assign a radius7   radius = 20; // radius is now 20Page 3689   // Compute area10   area = radius * radius * 3.14159;1112   // Display results13   System.out.println("The area for the circle of radius " +14    radius + " is " + area);15  }16 } FIGURE 2.1 The program displays the area of a circle.Variables such as radius and area correspond to memory locations. Every variable has a name, a type, a size, and a value.Declare variable: Line 3 declares that radius can store a double value.Assign value: The value is not defined until you assign a value. Line 7 assigns 20 into variable radius. Similarly, line 4 declares variable area, and line 10 assigns a value into area. The following table shows the value in the memory for area and radius as the program is executed. Each row in the table shows the values of variables after the statement in the corresponding line in the program is executed.Tracing program: This method of reviewing how a program works is called tracing a program. Tracing programs are helpful for understanding how programs work, and they are useful tools for finding errors in programs.line# radius area3 no value 4  no value7 20 10  1256.636Concatenate strings: The plus sign (+) has two meanings: one for addition and the other for concatenating (combining) strings. The plus sign (+) in lines 13–14 is called a string concatenation operator. It combines two strings into one.Concatenate strings with numbers: If a string is combined with a number, the number is converted into a string and concatenated with the other string. Therefore, the plus signs (+) in lines 13–14 concatenate strings into a longer string, which is then displayed in the output. Strings and string concatenation will be discussed further in Section 2.18.CautionA string cannot cross lines in the source code. Thus, the following statement would result in a compile error:System.out.println("Introduction to Java Programming, by Y. Daniel Liang");Page 37Break a long string: To fix the error, break the string into separate substrings, and use the concatenation operator (+) to combine them:System.out.println("Introduction to Java Programming, " + "by Y. Daniel Liang");TipIncremental development and testing: This example consists of three steps. It is a good approach to develop and test these steps incrementally by adding them one at a time.Check Point2.1 Identify and fix the errors in the following code:1  public class Test {2   public void main(string[] args) {3    int i;4    int k = 100.0;5    int j = i + 1;6 7    System.out.println("j is " + j + " and8     k is " + k);9   }10  }2.3 Reading Input from the ConsoleKey PointReading input from the console enables the program to accept input from the user.In Listing 2.1, the radius is fixed in the source code. To use a different radius, you have to modify the source code and recompile it. Obviously, this is not convenient, so instead you can use the Scanner class for console input.Java uses System.out to refer to the standard output device and System.in to the standard input device. By default, the output device is the display monitor and the input device is the keyboard. To perform console output, you simply use the println method to display a primitive value or a string to the console. Console input is not directly supported in Java, but you can use the Scanner class to create an object to read input from System.in, as follows:Scanner input = new Scanner(System.in);The syntax new Scanner(System.in) creates an object of the Scanner type. The syntax Scanner input declares that input is a variable whose type is Scanner. The whole line Scanner input = new Scanner(System.in) creates a Scanner object and assigns its reference to the variable input. An object may invoke its methods. To invoke a method on an object is to ask the object to perform a task. You can invoke the methods listed in Table 2.1 to read various types of input.For now, we will see how to read a number that includes a decimal point by invoking the nextDouble() method. Other methods will be covered when they are used. Listing 2.2 rewrites Listing 2.1 to prompt the user to enter a radius.LISTING 2.2 ComputeAreaWithConsoleInput.java1  import java.util.Scanner; // Scanner is in the java.util package2 3  public class ComputeAreaWithConsoleInput {4   public static void main(String[] args) {5    // Create a Scanner object6    Scanner input = new Scanner(System.in);7 Page 388    // Prompt the user to enter a radius9    System.out.print("Enter a number for radius: ");10    double radius = input.nextDouble();11 12    // Compute area13    double area = radius * radius * 3.14159;14 15    // Display results16    System.out.println("The area for the circle of radius " +17     radius + " is " + area);18   }19  }Side notes:Import class:1 import java.util.Scanner; // Scanner is in the java.util packageCreate a Scanner:6 Scanner input = new Scanner(System.in);Read a double:10 double radius = input.nextDouble();End side notes.TABLE 2.1 Methods for Scanner ObjectsMethod DescriptionnextByte() reads an integer of the byte type.nextShort() reads an integer of the short type.nextInt() reads an integer of the int type.nextLong() reads an integer of the long type.nextFloat() reads a number of the float type.nextDouble() reads a number of the double type.next() reads a string that ends before a whitespace character.nextLine() reads a line of text (i.e., a string ending with the Enter key pressed).Enter a number for radius: 2.5 [Enter]The area for the circle of radius 2.5 is 19.6349375Enter a number for radius: 23 [Enter]The area for the circle of radius 23.0 is 1661.90111The Scanner class is in the java.util package. It is imported in line 1. Line 6 creates a Scanner object.The statement in line 9 displays a message to prompt the user for input.System.out. print ("Enter a number for radius: ");Print vs. println: The print method is identical to the println method except that println moves to the beginning of the next line after displaying the string, but print does not advance to the next line when completed.The statement in line 10 reads input from the keyboard.double radius = input.nextDouble();After the user enters a number and presses the Enter key, the program reads the number and assigns it to radius.Page 39More details on objects will be introduced in Chapter 8. For the time being, simply accept that this is how to obtain input from the console.Listing 2.3 gives an example of reading multiple input from the keyboard. The program reads three numbers and displays their average.LISTING 2.3 ComputeAverage.java1  import java.util.Scanner; // Scanner is in the java.util package2 3  public class ComputeAverage {4   public static void main(String[] args) {5    // Create a Scanner object6    Scanner input = new Scanner(System.in);7 8    // Prompt the user to enter three numbers9    System.out.print("Enter three numbers: ");10    double number1 = input.nextDouble();11    double number2 = input.nextDouble();12    double number3 = input.nextDouble();13 14    // Compute average15    double average = (number1 + number2 + number3) / 3;16 17    // Display results18    System.out.println("The average of " + number1 + " " + number219     + " " + number3 + " is " + average);20   }21  }Side Notes:Import class:1 import java.util.Scanner; // Scanner is in the java.util packageCreate a Scanner:6 Scanner input = new Scanner(System.in);Read a double:10 double number1 = input.nextDouble();11 double number2 = input.nextDouble();12 double number3 = input.nextDouble();End Side NotesEnter input in one line:Enter three numbers: 1 2 3 [Enter]The average of 1.0 2.0 3.0 is 2.0Enter input in multiple lines:Enter three numbers: 10.5 1111.5  The average of 10.5 11.0 11.5 is 11.0The code for importing the Scanner class (line 1) and creating a Scanner object (line 6) are the same as in the preceding example as well as in all new programs you will write for reading input from the keyboard.Line 9 prompts the user to enter three numbers. The numbers are read in lines 10–12. You may enter three numbers separated by spaces, then press the Enter key, or enter each number followed by a press of the Enter key, as shown in the sample runs of this program.Runtime error: If you entered an input other than a numeric value, a runtime error would occur. In Chapter 14, you will learn how to handle the exception so that the program can continue to run.NoteIPO: Most of the programs in the early chapters of this book perform three steps: input, process, and output, called IPO. Input is receiving input from the user; process is pro-ducing results using the input; and output is displaying the results.Page 40Check Point2.2 How do you write a statement to let the user enter an integer or a double value from the keyboard?2.3 What happens if you entered 5a when executing the following code? double radius = input.nextDouble();2.4 IdentifiersKey PointIdentifiers are the names that identify the elements such as classes, methods, and variables in a program.As you see in Listing 2.3, ComputeAverage, main, input, number1, number2, number3, and so on are the names of things that appear in the program.Identifiers: In programming terminology, such names are called identifiers. All identifiers must obey the following rules:Identifier naming rules: • An identifier is a sequence of characters that consists of letters, digits, underscores (_), and dollar signs ($).• An identifier must start with a letter, an underscore (_), or a dollar sign ($). It cannot start with a digit.• cannot be a reserved word. (See Appendix A for a list of reserved words.)• An identifier cannot be true, false, or null.• An identifier can be of any length.For example, $2, ComputeArea, area, radius, and showMessageDialog are legal identifiers, whereas 2A and d+4 are not because they do not follow the rules. The Java compiler detects illegal identifiers and reports syntax errors.NoteCase sensitive: Since Java is case sensitive, area, Area, and AREA are all different identifiers.TipIdentifiers are for naming variables, constants, methods, classes, and packages. Descriptive identifiers make programs easy to read. Avoid using abbreviations for identifiers. Using complete words is more descriptive. For example, numberOfStudents is better than numStuds, numOfStuds, or numOfStudents.Descriptive names: We use descriptive names for complete programs in the text. However, we will occasionally use variables names such as i, j, k, x, and y in the code snippets for brevity. These names also provide a generic tone to the code snippets.TipThe $ character: Do not name identifiers with the $ character. By convention, the $ character should be used only in mechanically generated source code.Check Point2.4 Which of the following identifiers are valid? Which are Java keywords?miles, Test, a++, ––a, 4#R, $4, #44, apps class, public, int, x, y, radius2.5 VariablesKey PointVariables are used to represent values that may be changed in the program.As you see from the programs in the preceding sections, variables are used to store values to be used later in a program.Why called variables? They are called variables because their values can be changed. InPage 41the program in Listing 2.2, radius and area are variables of the double-precision, floating-point type. You can assign any numerical value to radius and area, and the values of radius and area can be reassigned. For example, in the following code, radius is initially 1.0 (line 2) and then changed to 2.0 (line 7), and area is set to 3.14159 (line 3) and then reset to 12.56636 (line 8).1 // Compute the first area2 radius = 1.0;3 area = radius * radius * 3.14159;4 System.out.println("The area is " + area + " for radius " + radius);5 6 // Compute the second area7 radius = 2.0; radius: 2.08 area = radius * radius * 3.14159;9 System.out.println("The area is " + area + " for radius " + radius);Side notes:2 radius = 1.0; radius: 1.03 area = radius * radius * 3.14159; area: 3.141597 radius = 2.0; radius: 2.08 area = radius * radius * 3.14159; area: 12.56636End side notes.Variables are for representing data of a certain type. To use a variable, you declare it by telling the compiler its name as well as what type of data it can store. The variable declaration tells the compiler to allocate appropriate memory space for the variable based on its data type. The syntax for declaring a variable isdatatype variableName;Declare variable: Here are some examples of variable declarations:int count; // Declare count to be an integer variabledouble radius; // Declare radius to be a double variabledouble interestRate; // Declare interestRate to be a double variableThese examples use the data types int and double. Later you will be introduced to additional data types, such as byte, short, long, float, char, and boolean. If variables are of the same type, they can be declared together, as follows:datatype variable1, variable2, ..., variablen; The variables are separated by commas. For example, int i, j, k; // Declare i, j, and k as int variablesInitialize variables: Variables often have initial values. You can declare a variable and initialize it in one step. Consider, for instance, the following code:int count = 1;This is equivalent to the next two statements:int count; count = 1;You can also use a shorthand form to declare and initialize variables of the same type together. For example,inti = 1, j = 2;TipA variable must be declared before it can be assigned a value. A variable declared in a method must be assigned a value before it can be used.Whenever possible, declare a variable and assign its initial value in one step. This will make the program easy to read and avoid programming errors.Page 42Scope of a variable: Every variable has a scope. The scope of a variable is the part of the program where the variable can be referenced. The rules that define the scope of a variable will be introduced gradually later in the book. For now, all you need to know is that a variable must be declared and initialized before it can be used. Consider the following code:int interestRate = 0.05int interest = interestrate * 45This code is wrong, because interestRate is assigned a value 0.05, but interestrate has not been declared and initialized. Java is case sensitive, so it considers interestRate and interestrate to be two different variables.2.6 Assignment Statements and Assignment ExpressionsKey PointAn assignment statement designates a value for a variable. An assignment statement can be used as an expression in Java.Assignment statement: After a variable is declared, you can assign a value to it by using an assignment statement.Assignment operator: In Java, the equal sign (=) is used as the assignment operator. The syntax for assignment statements is as follows:variable = expression;Expression: An expression represents a computation involving values, variables, and operators that, taking them together, evaluates to a value. For example, consider the following code:int y = 1; // Assign 1 to variable ydouble radius = 1.0; // Assign 1.0 to variable radiusint x = 5 * (3 / 2); // Assign the value of the expression to xx = y + 1; // Assign the addition of y and 1 to xarea = radius * radius* 3.14159; // Compute areaYou can use a variable in an expression. A variable can also be used in both sides of the = operator. For example,x = x + 1;In this assignment statement, the result of x + 1 is assigned to x. If x is 1 before the statement is executed, then it becomes 2 after the statement is executed.To assign a value to a variable, you must place the variable name to the left of the assignment operator. Thus, the following statement is wrong:1 = x; // WrongNoteIn mathematics, x = 2 * x + 1 denotes an equation. However, in Java, x = 2 * x + 1 is an assignment statement that evaluates the expression 2 * x + 1 and assigns the result to x.In Java, an assignment statement is essentially an expression that evaluates to the value to be assigned to the variable on the left side of the assignment operator.Assignment expression: For this reason, an assignment statement is also known as an assignment expression. For example, the following statement is correct:System.out.println(x = 1);Page 43which is equivalent tox = 1;System.out.println(x);If a value is assigned to multiple variables, you can use this syntax:i = j = k = 1; which is equivalent tok = 1;j = k; i = j;NoteIn an assignment statement, the data type of the variable on the left must be compatible with the data type of the value on the right. For example, int x = 1.0 would be illegal, because the data type of x is int. You cannot assign a double value (1.0) to an int variable without using type casting. Type casting is introduced in Section 2.15.2.7 Named ConstantsKey PointA named constant is an identifier that represents a permanent value.constantThe value of a variable may change during the execution of a program, but a named constant, or simply constant, represents permanent data that never changes. In our ComputeArea program, π is a constant. If you use it frequently, you don’t want to keep typing 3.14159; instead, you can declare a constant for π. Here is the syntax for declaring a constant:final datatype CONSTANTNAME = value;A constant must be declared and initialized in the same statement.Final keyword: The word final is a Java keyword for declaring a constant. For example, you can declare π as a constant and rewrite Listing 2.1 as follows: // ComputeArea.java: Compute the area of a circle   public class ComputeArea {  public static void main(String[] args) {   final double PI = 3.14159; // Declare a constant   // Assign a radius    double radius = 20;   // Compute area   double area = radius * radius * PI;   // Display results   System.out.println("The area for the circle of radius " +    radius + " is " + area);  } }Benefits of constants: There are three benefits of using constants: (1) You don’t have to repeatedly type the same value if it is used multiple times; (2) if you have to change the constant value (e.g., from 3.14 to 3.14159 for PI), you need to change it only in a single location in the source code; and (3) a descriptive name for a constant makes the program easy to read.Page 442.8 Naming ConventionsKey PointSticking with the Java naming conventions makes your programs easy to read and avoids errors.Make sure that you choose descriptive names with straightforward meanings for the variables, constants, classes, and methods in your program. As mentioned earlier, names are case sensitive. Listed below are the conventions for naming variables, methods, and classes.Name variables and methods:• Use lowercase for variables and methods. If a name consists of several words, concatenate them into one, making the first word lowercase and capitalizing the first letter of each subsequent word—for example, the variables radius and area and the method showMessageDialog.Name classes:• Capitalize the first letter of each word in a class name—for example, the class names ComputeArea, System, and JOptionPane.Name constants:• Capitalize every letter in a constant, and use underscores between words—for example, the constants PI and MAX_VALUE.It is important to follow the naming conventions to make your programs easy to read.CautionName classes:Do not choose class names that are already used in the Java library. For example, since the System class is defined in Java, you should not name your class System.Check Point2.5 What are the benefits of using constants? Declare an int constant SIZE with value 20.2.6 What are the naming conventions for class names, method names, constants, and variables? Which of the following items can be a constant, a method, a variable, or a class according to the Java naming conventions?MAX_VALUE, Test, read, readInt2.7 Translate the following algorithm into Java code:Step 1: Declare a double variable named miles with initial value 100.Step 2: Declare a double constant named KILOMETERS_PER_MILE with value 1.609.Step 3: Declare a double variable named kilometers, multiply miles and KILOMETERS_PER_MILE, and assign the result to kilometers.Step 4: Display kilometers to the console. What is kilometers after Step 4?2.9 Numeric Data Types and OperationsKey PointJava has six numeric types for integers and floating-point numbers with operators +, -, *, /, and %.2.9.1 Numeric TypesEvery data type has a range of values. The compiler allocates memory space for each variable or constant according to its data type. Java provides eight primitive data types for numeric values, characters, and Boolean values. This section introduces numeric data types and operators. Table 2.2 lists the six numeric data types, their ranges, and their storage sizes.Page 45TABLE 2.2 Numeric Data TypesName Range Storage Size byte -˛27 to 27-1 (-128 to 127) 8-bit signed byte typeshort -˛215 to 215-1 (-˛32768 to 32767) 16-bit signed short typeint -˛231 to 231-1 (-˛2147483648 to 2147483647) 32-bit signed int typelong -˛263 263-1to 64-bit signed long type (i.e., -˛9223372036854775808 to 9223372036854775807)  float Negative range: -˛3.4028235E+38 -1.4E-45to 32-bit IEEE 754 float type Positive range: 1.4E-45 to 3.4028235E+38  double Negative range: -˛1.7976931348623157E+308 -˛4.9E-324to 64-bit IEEE 754 double type Positive range: 4.9E-324 to 1.7976931348623157E+308  NoteIEEE 754 is a standard approved by the Institute of Electrical and Electronics Engineers for representing floating-point numbers on computers. The standard has been widely adopted. Java uses the 32-bit IEEE 754 for the float type and the 64-bit IEEE 754 for the double type. The IEEE 754 standard also defines special floating-point values, which are listed in Appendix E.Integer types: Java uses four types for integers: byte, short, int, and long. Choose the type that is most appropriate for your variable. For example, if you know an integer stored in a variable is within a range of a byte, declare the variable as a byte. For simplicity and consistency, we will use int for integers most of the time in this book.Floating-point types: Java uses two types for floating-point numbers: float and double. The double type is twice as big as float, so the double is known as double precision and float as single precision. Normally you should use the double type, because it is more accurate than the float type.CautionWhat is overflow? When a variable is assigned a value that is too large (in size) to be stored, it causes overflow. For example, executing the following statement causes overflow, because the largest value that can be stored in a variable of the int type is 2147483647. 2147483648 will be too large for an int value.int value = 2147483647 + 1;// value will actually be -2147483648Likewise, executing the following statement causes overflow, because the smallest value that can be stored in a variable of the int type is -2147483648. -2147483649 will be too large in size to be stored in an int variable.int value = -2147483648 - 1;// value will actually be 2147483647Java does not report warnings or errors on overflow, so be careful when working with numbers close to the maximum or minimum range of a given type.Page 46What is underflow? When a floating-point number is too small (i.e., too close to zero) to be stored, it causes underflow. Java approximates it to zero, so normally you don’t need to be concerned about underflow.2.9.2 Numeric OperatorsOperators +, -, *, /, %: The operators for numeric data types include the standard arithmetic operators: addition (+), subtraction (–), multiplication (*), division (/), and remainder (%), as shown in Table 2.3.Operands: The operands are the values operated by an operator.TABLE 2.3 Numeric OperatorsName Meaning Example Result+ Addition 34 + 1 35- Subtraction 34.0 – 0.1 33.9* Multiplication 300 * 30 9000/ Division 1.0 / 2.0 0.5% Remainder 20 % 3 2Integer division: When both operands of a division are integers, the result of the division is an integer and the fractional part is truncated. For example, 5 / 2 yields 2, not 2.5, and –5 / 2 yields -2, not –2.5. To perform regular mathematical division, one of the operands must be a floating-point number. For example, 5.0 / 2 yields 2.5.The % operator, known as remainder or modulo operator, yields the remainder after division. The operand on the left is the dividend and the operand on the right is the divisor. Therefore, 7 % 3 yields 1, 3 % 7 yields 3, 12 % 4 yields 0, 26 % 8 yields 2, and 20 % 13 yields 7. The % operator is often used for positive integers, but it can also be used with negative integers and floating-point values. The remainder is negative only if the dividend is negative. For example, -7 % 3 yields -1, -12 % 4 yields 0, -26 % -8 yields -2, and 20 % -13 yields 7.Remainder is very useful in programming. For example, an even number % 2 is always 0 and an odd number % 2 is always 1. Thus, you can use this property to determine whether a number is even or odd. If today is Saturday, it will be Saturday again in 7 days. Suppose you and your friends are going to meet in 10 days. What day is in 10 days? You can find that the day is Tuesday using the following expression: Page 47The program in Listing 2.4 obtains minutes and remaining seconds from an amount of time in seconds. For example, 500 seconds contains 8 minutes and 20 seconds.LISTING 2.4 DisplayTime.java1  import java.util.Scanner;2 3  public class DisplayTime {4   public static void main(String[] args) {5    Scanner input = new Scanner(System.in);6    // Prompt the user for input7    System.out.print("Enter an integer for seconds: ");8    int seconds = input.nextInt();9 10    int minutes = seconds / 60; // Find minutes in seconds11    int remainingSeconds = seconds % 60; // Seconds remaining12    System.out.println(seconds + " seconds is " + minutes +13     " minutes and " + remainingSeconds + " seconds");14   }15  }Side note:Import Scanner:1 import java.util.Scanner;Create a Scanner:5 Scanner input = new Scanner(System.in);Read an integer:8 int seconds = input.nextInt();Divide:10 seconds / 60; // Find minutes in secondsRemainder:11 int remainingSeconds = seconds % 60; // Seconds remainingEnd side note.Enter an integer for seconds: 500 [Enter] 500 seconds is 8 minutes and 20 secondsline# seconds minutes remainingSeconds8 500  10  8 11   20The nextInt() method (line 8) reads an integer for seconds. Line 10 obtains the minutes using seconds / 60. Line 11 (seconds % 60) obtains the remaining seconds after taking away the minutes.Unary operator: The + and - operators can be both unary and binary. A unary operator has only one operand;Binary operator: a binary operator has two. For example, the - operator in -5 is a unary operator to negate number 5, whereas the - operator in 4 - 5 is a binary operator for subtracting 5 from 4.NoteFloating-point approximation: Calculations involving floating-point numbers are approximated because these numbers are not stored with complete accuracy. For example,System.out.println(1.0 - 0.1 - 0.1 - 0.1 - 0.1 - 0.1); displays 0.5000000000000001, not 0.5, and System.out.println(1.0 - 0.9);displays 0.09999999999999998, not 0.1. Integers are stored precisely. Therefore, calculations with integers yield a precise integer result.Page 482.9.3 Exponent OperationsMath.pow(a, b) method: The Math.pow(a, b) method can be used to compute ab. The pow method is defined in the Math class in the Java API. You invoke the method using the syntax Math.pow(a, b) (i.e., Math.pow(2, 3)), which returns the result of ab (23). Here a and b are parameters for the pow method and the numbers 2 and 3 are actual values used to invoke the method. For example,System.out.println(Math.pow(2, 3)); // Displays 8.0 System.out.println(Math.pow(4, 0.5)); // Displays 2.0 System.out.println(Math.pow(2.5, 2)); // Displays 6.25 System.out.println(Math.pow(2.5, -2)); // Displays 0.16Chapter 5 introduces more details on methods. For now, all you need to know is how to invoke the pow method to perform the exponent operation.Check Point2.8 Find the largest and smallest byte, short, int, long, float, and double. Which of these data types requires the least amount of memory?2.9 Show the result of the following remainders.56 % 678 % -4-34 % 5-34 % -55 % 11 % 52.10 If today is Tuesday, what will be the day in 100 days?2.11 What is the result of 25 / 4? How would you rewrite the expression if you wished the result to be a floating-point number?2.12 Are the following statements correct? If so, show the output.System.out.println("25 / 4 is " + 25 / 4);System.out.println("25 / 4.0 is " + 25 / 4.0);System.out.println("3 * 2 / 4 is " + 3 * 2 / 4);System.out.println("3.0 * 2 / 4 is " + 3.0 * 2 / 4);2.13 Write a statement to display the result of 23.5.2.14 Suppose m and r are integers. Write a Java expression for mr2 to obtain a floating point result.2.10 Numeric LiteralsKey PointA literal is a constant value that appears directly in a program.Literal: For example, 34 and 0.305 are literals in the following statements:int numberOfYears = 34; double weight = 0.305;2.10.1 Integer LiteralsAn integer literal can be assigned to an integer variable as long as it can fit into the variable. A compile error will occur if the literal is too large for the variable to hold. The statement byte b = 128, for example, will cause a compile error, because 128 cannot be stored in a variable of the byte type. (Note that the range for a byte value is from –128 to 127.)Page 49An integer literal is assumed to be of the int type, whose value is between-231 (-2147483648) and 231 - 1(2147483647).Long type: To denote an integer literal of the long type, append the letter L or l to it. For example, to write integer 2147483648 in a Java program, you have to write it as 2147483648L or 2147483648l, because 2147483648 exceeds the range for the int value. L is preferred because l (lowercase L) can easily be confused with 1 (the digit one).NoteOctal and hex literals: By default, an integer literal is a decimal integer number. To denote an octal integer literal, use a leading 0 (zero), and to denote a hexadecimal integer literal, use a leading 0x or 0X (zero x). For example, the following code displays the decimal value 65535 for hexadecimal number FFFF.System.out.println(0xFFFF);Hexadecimal numbers, binary numbers, and octal numbers are introduced in Appendix F.2.10.2 Floating-Point LiteralsFloating-point literals are written with a decimal point. By default, a floating-point literal is treated as a double type value. For example 5.0 is considered a double value not a float value.Suffix f or F: You can make a number a float by appending the letter f or F,Suffix d or D: and you can make a number a double by appending the letter d or D. For example, you can use 100.2f or 100.2F for a float number, and 100.2d or 100.2D for a double number.NoteDouble vs. float: The double type values are more accurate than the float type values. For example,System.out.println("1.0 / 3.0 is " + 1.0 / 3.0);displays 1.0 / 3.0 is 0.3333333333333333.System.out.println("1.0F / 3.0F is " + 1.0F / 3.0F); displays 1.0F / 3.0F is 0.33333334.2.10.3 Scientific NotationFloating-point literals can be written in scientific notation in the form of a * 10b. For example, the scientific notation for 123.456 is 1.23456 * 102 and for 0.0123456 is 1.23456 * 10-2. A special syntax is used to write scientific notation numbers. For example, 1.23456 * 102 is written as 1.23456E2 or 1.23456E+2 and 1.23456 * 10-2 as 1.23456E-2. E (or e) represents an exponent and can be in either lowercase or uppercase.NoteWhy called floating-point? The float and double types are used to represent numbers with a decimal point. Why are they called floating-point numbers? These numbers are stored in scientific notation internally. When a number such as 50.534 is converted into scientific notation, such as 5.0534E+1, its decimal point is moved (i.e., floated) to a new position.Check Point2.15 Which of the following are correct literals for floating-point numbers?12.3, 12.3e+2, 23.4e-2, –334.4, 20.5, 39F, 40D 2.16 Which of the following are the same as 52.534?5.2534e+1, 0.52534e+2, 525.34e-1, 5.2534e+0Page 502.11 Evaluating Expressions and Operator PrecedenceKey PointJava expressions are evaluated in the same way as arithmetic expressions.Writing a numeric expression in Java involves a straightforward translation of an arithmetic expression using Java operators. For example, the arithmetic expression can be translated into a Java expression as:(3 + 4 * x) / 5 – 10 * (y - 5) * (a + b + c) / x + 9 * (4 / x + (9 + x) / y)Evaluating an expression: Though Java has its own way to evaluate an expression behind the scene, the result of a Java expression and its corresponding arithmetic expression are the same. Therefore, you can safely apply the arithmetic rule for evaluating a Java expression. Operators contained within pairs of parentheses are evaluated first.Operator precedence rule: Parentheses can be nested, in which case the expression in the inner parentheses is evaluated first. When more than one operator is used in an expression, the following operator precedence rule is used to determine the order of evaluation.• Multiplication, division, and remainder operators are applied first. If an expression contains several multiplication, division, and remainder operators, they are applied from left to right.• Addition and subtraction operators are applied last. If an expression contains several addition and subtraction operators, they are applied from left to right.Here is an example of how an expression is evaluated: Listing 2.5 gives a program that converts a Fahrenheit degree to Celsius using the formula celsius = (59)( fahrenheit - 32).LISTING 2.5 FahrenheitToCelsius.java1  import java.util.Scanner;2 3  public class FahrenheitToCelsius {4   public static void main(String[] args) {5    Scanner input = new Scanner(System.in);6 7    System.out.print("Enter a degree in Fahrenheit: ");Page 518    double fahrenheit = input.nextDouble();9 10    // Convert Fahrenheit to Celsius11    double celsius = (5.0 / 9) * (fahrenheit - 32);12    System.out.println("Fahrenheit " + fahrenheit + " is " +13     celsius + " in Celsius");14   }15  }Side notes:Divide:11 double celsius = (5.0 / 9) * (fahrenheit - 32);End side notes.Enter a degree in Fahrenheit: 100 [Enter]Fahrenheit 100.0 is 37.77777777777778 in Celsiusline# fahrenheit celsius8 100 11  37.77777777777778Integer vs. decimal division: Be careful when applying division. Division of two integers yields an integer in Java. 9 is translated to 5.0 / 9 instead of 5 / 9 in line 11, because 5 / 9 yields 0 in Java.Check Point2.17 How would you write the following arithmetic expression in Java? 2.12 Case Study: Displaying the Current TimeKey PointYou can invoke System.currentTimeMillis() to return the current time.The problem is to develop a program that displays the current time in GMT (Greenwich Mean Time) in the format hour:minute:second, such as 13:19:8.CurrentTimeMillis: The currentTimeMillis method in the System class returns the current time in milliseconds elapsed since the time 00:00:00 on January 1, 1970 GMT, as shown in Figure 2.2.UNIX epoch: This time is known as the UNIX epoch. The epoch is the point when time starts, and 1970 was the year when the UNIX operating system was formally introduced. FIGURE 2.2 The System.currentTimeMillis() returns the number of milliseconds since the UNIX epoch.You can use this method to obtain the current time, and then compute the current second, minute, and hour as follows.1. Obtain the total milliseconds since midnight, January 1, 1970, in totalMilliseconds by invoking System.currentTimeMillis() (e.g., 1203183068328 milliseconds).Page 522. Obtain the total seconds totalSeconds by dividing totalMilliseconds by 1000 (e.g., 1203183068328 milliseconds / 1000 1203183068 seconds). =3. Compute the current second from totalSeconds % 60 (e.g., 1203183068 seconds % 60 8, which is the current second). =4. Obtain the total minutes totalMinutes by dividing totalSeconds by 60 (e.g., 1203183068 seconds / 60 20053051 minutes). =5. Compute the current minute from totalMinutes % 60 (e.g., 20053051 minutes % 60 31, which is the current minute). =6. Obtain the total hours totalHours by dividing totalMinutes by 60 (e.g., 20053051 minutes / 60 334217 hours). =7. Compute the current hour from totalHours % 24 (e.g., 334217 hours % 24 17, = which is the current hour).Listing 2.6 gives the complete program.LISTING 2.6 ShowCurrentTime.java1  public class ShowCurrentTime {2   public static void main(String[] args) {3    // Obtain the total milliseconds since midnight, Jan 1, 19704    long totalMilliseconds = System.currentTimeMillis();5 6    // Obtain the total seconds since midnight, Jan 1, 19707    long totalSeconds = totalMilliseconds / 1000;8 9    // Compute the current second in the minute in the hour10    long currentSecond = totalSeconds % 60;11 12    // Obtain the total minutes13    long totalMinutes = totalSeconds / 60;14 15    // Compute the current minute in the hour16    long currentMinute = totalMinutes % 60;17 18    // Obtain the total hours19    long totalHours = totalMinutes / 60;20 21    // Compute the current hour22    long currentHour = totalHours % 24;23 24    // Display results25    System.out.println("Current time is " + currentHour + ":"26     + currentMinute + ":" + currentSecond + " GMT");27   }28  }Side notes:totalMilliseconds:4 long totalMilliseconds = System.currentTimeMillis();totalSeconds:7 long totalSeconds = totalMilliseconds / 1000;currentSecond:10 long currentSecond = totalSeconds % 60;totalMinutes:13 long totalMinutes = totalSeconds / 60;currentMinute:16 long currentMinute = totalMinutes % 60;totalHours:19 long totalHours = totalMinutes / 60;currentHour:22 long currentHour = totalHours % 24; preparing output25 System.out.println("Current time is " + currentHour + ":"26 + currentMinute + ":" + currentSecond + " GMT");End side notes.Current time is 17:31:8 GMTLine 4 invokes System.currentTimeMillis() to obtain the current time in milliseconds as a long value. Thus, all the variables are declared as the long type in this program. The seconds, minutes, and hours are extracted from the current time using the / and % operators (lines 6–22).Page 53 line# 4 7 10 13 16 19 22variables        totalMilliseconds  1203183068328      totalSeconds   1203183068     currentSecond    8    totalMinutes     20053051   currentMinute      31  totalHours       334217 currentHour        17In the sample run, a single digit 8 is displayed for the second. The desirable output would be 08. This can be fixed by using a function that formats a single digit with a prefix 0 (see Exercise 5.37).2.13 Augmented Assignment OperatorsKey PointThe operators +, -, *, /, and % can be combined with the assignment operator to form augmented operators.Very often the current value of a variable is used, modified, and then reassigned back to the same variable. For example, the following statement increases the variable count by 1: count = count + 1;Java allows you to combine assignment and addition operators using an augmented (or compound) assignment operator. For example, the preceding statement can be written as:count += 1;Addition assignment operator: The += is called the addition assignment operator. Table 2.4 shows other augmented assignment operators.TABLE 2.4 Augmented Assignment OperatorsOperator Name Example Equivalent+= Addition assignment i += 8 i = i + 8-= Subtraction assignment i -= 8 i = i – 8*= Multiplication assignment i *= 8 i = i * 8/= Division assignment i /= 8 i = i / 8%= Remainder assignment i %= 8 i = i % 8Page 54CautionThere are no spaces in the augmented assignment operators. For example, + = should be +=.NoteLike the assignment operator (=), the operators (+=, -=, *=, /=, %=) can be used to form an assignment statement as well as an expression. For example, in the following code, x += 2 is a statement in the first line and an expression in the second line.x += 2; // StatementSystem.out.println(x += 2); // Expression2.14 Increment and Decrement OperatorsKey PointThe increment (++) and decrement (--) operators are for incrementing and decrementing a variable by 1.Increment operator (++) and decrement operator (--): The ++ and - - are two shorthand operators for incrementing and decrementing a variable by 1. These are handy, because that’s often how much the value needs to be changed in many programming tasks. For example, the following code increments i by 1 and decrements j by 1.inti = 3, j = 3;i++; // i becomes 4 j--; // j becomes 2i++ is pronounced as i plus plus and i-- as i minus minus.Postincrement and postdecrement: These operators are known as postfix increment (or postincrement) and postfix decrement (or postdecrement), because the operators ++ and -- are placed after the variable. These operators can also be placed before the variable. For example,inti = 3, j = 3;++i; // i becomes 4 --j; // j becomes 2++i increments i by 1 and --j decrements j by 1.Preincrement and predecrement: These operators are known as prefix increment (or preincrement) and prefix decrement (or predecrement).As you see, the effect of i++ and ++i or i-- and --i are the same in the preceding examples. However, their effects are different when they are used in statements that do more than just increment and decrement. Table 2.5 describes their differences and gives examples.TABLE 2.5 Increment and Decrement OperatorsOperator Name Description Example (assume i = 1)++var preincrement Increment var by 1, and use the new var value in the statement int j = ++i;// j is 2, i is 2var++ postincrement Increment var by 1, but use the original var value in the statement int j = i++;// j is 1, i is 2--var predecrement Decrement var by 1, and use the new var value in the statement int j = --i;// j is 0, i is 0var-- postdecrement Decrement var by 1, and use the original var value in the statement int j = i--;// j is 1, i is 0Page 55Here are additional examples to illustrate the differences between the prefix form of ++ (or --) and the postfix form of ++ (or --). Consider the following code:int i = 10;int newNum = 10 * i++;Same effect asint newNum = 10 * i; i = i + 1;System.out.print("i is " + i + ", newNum is " + newNum);i is 11, newNum is 100In this case, i is incremented by 1, then the old value of i is used in the multiplication. So newNum becomes 100. If i++ is replaced by ++i as follows,int i = 10;int newNum = 10 * (++i);Same effect asi = i + 1;int newNum = 10 * i;System.out.print("i is " + i + ", newNum is " + newNum);i is 11, newNum is 110i is incremented by 1, and the new value of i is used in the multiplication. Thus newNum becomes 110.Here is another example:double x = 1.0;double y = 5.0;double z = x-- + (++y);After all three lines are executed, y becomes 6.0, z becomes 7.0, and x becomes 0.0.TipUsing increment and decrement operators makes expressions short, but it also makes them complex and difficult to read. Avoid using these operators in expressions that modify multiple variables or the same variable multiple times, such as this one: int k = ++i + i.Check Point2.18 Which of these statements are true?a. Any expression can be used as a statement.b. The expression x++ can be used as a statement.c. The statement x = x + 5 is also an expression.d. The statement x = y = x = 0 is illegal.2.19 Assume that int a = 1 and double d = 1.0, and that each expression is independent. What are the results of the following expressions?a = 46 / 9;a = 46 % 9 + 4 * 4 - 2;a = 45 + 43 % 5 * (23 * 3 % 2);a %= 3 / a + 3;d = 4 + d * d + 4;d += 1.5 * 3 + (++a);d -= 1.5 * 3 + a++;Page 562.20 How do you obtain the current minute using the System.currentTimeMillis() method?2.15 Numeric Type ConversionsKey PointFloating-point numbers can be converted into integers using explicit casting.Can you perform binary operations with two operands of different types? Yes. If an integer and a floating-point number are involved in a binary operation, Java automatically converts the integer to a floating-point value. So, 3 * 4.5 is same as 3.0 * 4.5.You can always assign a value to a numeric variable whose type supports a larger range of values; thus, for instance, you can assign a long value to a float variable. You cannot, however, assign a value to a variable of a type with a smaller range unless you use type casting.Casting: Casting is an operation that converts a value of one data type into a value of another data type.Widening a type: Casting a type with a small range to a type with a larger range is known as widening a type.Narrowing a type: Casting a type with a large range to a type with a smaller range is known as narrowing a type. Java will automatically widen a type, but you must narrow a type explicitly.The syntax for casting a type is to specify the target type in parentheses, followed by the variable’s name or the value to be cast. For example, the following statementSystem.out.println((int)1.7);displays 1. When a double value is cast into an int value, the fractional part is truncated. The following statementSystem.out.println((double)1 / 2);displays 0.5, because 1 is cast to 1.0 first, then 1.0 is divided by 2. However, the statement System.out.println(1 / 2);displays 0, because 1 and 2 are both integers and the resulting value should also be an integer.CautionPossible loss of precision: Casting is necessary if you are assigning a value to a variable of a smaller type range, such as assigning a double value to an int variable. A compile error will occur if casting is not used in situations of this kind. However, be careful when using casting, as loss of information might lead to inaccurate results.NoteCasting does not change the variable being cast. For example, d is not changed after casting in the following code:double d = 4.5;int i = (int)d; // i becomes 4, but d is still 4.5NoteCasting in an augmented expression: In Java, an augmented expression of the form x1 op= x2 is implemented as x1 = (T)(x1 op x2), where T is the type for x1. Therefore, the following code is correct.int sum = 0;sum += 4.5; // sum becomes 4 after this statementsum += 4.5 is equivalent to sum = (int)(sum + 4.5).Page 57NoteTo assign a variable of the int type to a variable of the short or byte type, explicit casting must be used. For example, the following statements have a compile error:int i = 1;byte b = i; // Error because explicit casting is requiredHowever, so long as the integer literal is within the permissible range of the target variable, explicit casting is not needed to assign an integer literal to a variable of the short or byte type (see Section 2.10, Numeric Literals).The program in Listing 2.7 displays the sales tax with two digits after the decimal point.LISTING 2.7 SalesTax.java1  import java.util.Scanner;2 3  public class SalesTax {4   public static void main(String[] args) {5    Scanner input = new Scanner(System.in);6 7    System.out.print("Enter purchase amount: ");8    double purchaseAmount = input.nextDouble();9 10    double tax = purchaseAmount * 0.06;11    System.out.println("Sales tax is $" + (int)(tax * 100) / 100.0);12   }13  }Side notes:Casting:10 double tax = purchaseAmount * 0.06;11 System.out.println("Sales tax is $" + (int)(tax * 100) / 100.0);End side notes.Enter purchase amount: 197.55 [Enter]Sales tax is $11.85line# purchaseAmount tax output8 197.55  10  11.853 11   11.85Formatting numbers: The variable purchaseAmount is 197.55 (line 8). The sales tax is 6% of the purchase, so the tax is evaluated as 11.853 (line 10). Note thattax * 100 is 1185.3(int)(tax * 100) is 1185(int)(tax * 100) / 100.0 is 11.85So, the statement in line 11 displays the tax 11.85 with two digits after the decimal point.Check Point2.21 Can different types of numeric values be used together in a computation?2.22 What does an explicit casting from a double to an int do with the fractional part of the double value? Does casting change the variable being cast?2.23 Show the following output:float f = 12.5F; int i = (int)f;Page 58System.out.println("f is " + f); System.out.println("i is " + i);2.24 If you change (int)(tax * 100) / 100.0 to (int)(tax * 100) / 100 in line 11 in Listing 2.7, what will be the output for the input purchase amount of 197.556?2.16 Software Development ProcessKey PointThe software development life cycle is a multi-stage process that includes requirements specification, analysis, design, implementation, testing, deployment, and maintenance.Developing a software product is an engineering process. Software products, no matter how large or how small, have the same life cycle: requirements specification, analysis, design, implementation, testing, deployment, and maintenance, as shown in Figure 2.3. FIGURE 2.3 At any stage of the software development life cycle, it may be necessary to go back to a previous stage to correct errors or deal with other issues that might prevent the software from functioning as expected.Requirements specification: Requirements specification is a formal process that seeks to understand the problem that the software will address and to document in detail what the software system needs to do. This phase involves close interaction between users and developers. Most of the examples in this book are simple, and their requirements are clearly stated. In the real world, however, problems are not always well defined. Developers need to work closely with their customers (the individuals or organizations that will use the software) and study the problem carefully to identify what the software needs to do.System analysis: System analysis seeks to analyze the data flow and to identify the system’s input and output. When you do analysis, it helps to identify what the output is first, and then figure out what input data you need in order to produce the output.System design: System design is to design a process for obtaining the output from the input. This phase involves the use of many levels of abstraction to break down the problem into manageable components and design strategies for implementing each component. You can view each component as a subsystem that performs a specific function of the system.IPO: The essence of system analysis and design is input, process, and output (IPO).Page 59Implementation: Implementation involves translating the system design into programs. Separate programs are written for each component and then integrated to work together. This phase requires the use of a programming language such as Java. The implementation involves coding, self-testing, and debugging (that is, finding errors, called bugs, in the code).Testing: Testing ensures that the code meets the requirements specification and weeds out bugs. An independent team of software engineers not involved in the design and implementation of the product usually conducts such testing.Deployment: Deployment makes the software available for use. Depending on the type of the software, it may be installed on each user’s machine or installed on a server accessible on the Internet.Maintenance: Maintenance is concerned with updating and improving the product. A software product must continue to perform and improve in an ever-evolving environment. This requires periodic upgrades of the product to fix newly discovered bugs and incorporate changes.Compute loan payments: To see the software development process in action, we will now create a program that computes loan payments. The loan can be a car loan, a student loan, or a home mortgage loan. For an introductory programming course, we focus on requirements specification, analysis, design, implementation, and testing.Stage 1: Requirements SpecificationThe program must satisfy the following requirements:• It must let the user enter the interest rate, the loan amount, and the number of years for which payments will be made.• It must compute and display the monthly payment and total payment amounts. Stage 2: System AnalysisThe output is the monthly payment and total payment, which can be obtained using the following formulas: So, the input needed for the program is the monthly interest rate, the length of the loan in years, and the loan amount.NoteThe requirements specification says that the user must enter the annual interest rate, the loan amount, and the number of years for which payments will be made. During analysis, however, it is possible that you may discover that input is not sufficient or that some values are unnecessary for the output. If this happens, you can go back and modify the requirements specification.NoteIn the real world, you will work with customers from all walks of life. You may develop software for chemists, physicists, engineers, economists, and psychologists, and of course you will not have (or need) complete knowledge of all these fields. Therefore, you don’t have to know how formulas are derived, but given the monthly interest rate, the number of years, and the loan amount, you can compute the monthly payment in this program. You will, however, need to communicate with customers and understand how a mathematical model works for the system.Page 60Stage 3: System DesignDuring system design, you identify the steps in the program.Step 1. Prompt the user to enter the annual interest rate, the number of years, and the loan amount.Step 2. The input for the annual interest rate is a number in percent format, such as 4.5%. The program needs to convert it into a decimal by dividing it by 100. To obtain the monthly interest rate from the annual interest rate, divide it by 12, since a year has 12 months. So, to obtain the monthly interest rate in decimal format, you need to divide the annual interest rate in percentage by 1200. For example, if the annual interest rate is 4.5%, then the monthly interest rate is 4.5/1200 = 0.00375.Step 3. Compute the monthly payment using the preceding formula.Step 4. Compute the total payment, which is the monthly payment multiplied by 12 and multiplied by the number of years.Step 5. Display the monthly payment and total payment. Stage 4: ImplementationImplementation is also known as coding (writing the code).Math.pow(a, b) method: In the formula, you have to compute (1 + monthlyInterestRate)numberOfYears*12, which can be obtained using Math.pow(1 + monthlyInterestRate, numberOfYears * 12).Listing 2.8 gives the complete program.LISTING 2.8 ComputeLoan.java1  import java.util.Scanner;2 3  public class ComputeLoan {4   public static void main(String[] args) {5    // Create a Scanner6    Scanner input = new Scanner(System.in);7 8    // Enter annual interest rate in percentage, e.g., 7.25%9    System.out.print("Enter annual interest rate, e.g., 7.25%: ");10    double annualInterestRate = input.nextDouble();11 12    // Obtain monthly interest rate13    double monthlyInterestRate = annualInterestRate / 1200;14 15    // Enter number of years16    System.out.print(17     "Enter number of years as an integer, e.g., 5: ");18    int numberOfYears = input.nextInt();19 20    // Enter loan amount21    System.out.print("Enter loan amount, e.g., 120000.95: ");22    double loanAmount = input.nextDouble();23 24    // Calculate payment25    double monthlyPayment = loanAmount * monthlyInterestRate / (126     - 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));27    double totalPayment = monthlyPayment * numberOfYears * 12;28 29    // Display resultsPage 6130    System.out.println("The monthly payment is $" +31     (int)(monthlyPayment * 100) / 100.0);32    System.out.println("The total payment is $" +33     (int)(totalPayment * 100) / 100.0);34   }35  }Side notes:Import class:1 import java.util.Scanner;Create a Scanner:6 Scanner input = new Scanner(System.in);Enter interest rate:10 double annualInterestRate = input.nextDouble();Enter years:18 int numberOfYears = input.nextInt();Enter loan amount:22 double loanAmount = input.nextDouble();MonthlyPayment:25 double monthlyPayment = loanAmount * monthlyInterestRate / (126 - 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));TotalPayment:27 double totalPayment = monthlyPayment * numberOfYears * 12;Casting:31 (int)(monthlyPayment * 100) / 100.0);Casting:33 (int)(totalPayment * 100) / 100.0);End side notes.Enter annual interest rate, e.g., 5.75%: 5.75 [Enter]Enter number of years as an integer, e.g., 5: 15 [Enter]Enter loan amount, e.g., 120000.95: 250000   [Enter]The monthly payment is $2076.02 The total payment is $373684.53 line# 10 13 18 22 25 27variables       annualInterestRate  5.75     monthlyInterestRate   0.0047916666666    numberOfYears    15   loanAmount     250000  monthlyPayment      2076.0252175 totalPayment       373684.539Line 10 reads the annual interest rate, which is converted into the monthly interest rate in line 13.Choose the most appropriate data type for the variable. For example, numberOfYears is best declared as an int (line 18), although it could be declared as a long, float, or double. Note that byte might be the most appropriate for numberOfYears. For simplicity, however, the examples in this book will use int for integer and double for floating-point values.The formula for computing the monthly payment is translated into Java code in lines 25–27. Casting is used in lines 31 and 33 to obtain a new monthlyPayment and totalPayment with two digits after the decimal points.The program uses the Scanner class, imported in line 1. The program also uses the Math class, and you might be wondering why that class isn’t imported into the program.Java.lang package: The Math class is in the java.lang package, and all classes in the java.lang package are implicitly imported. Therefore, you don’t need to explicitly import the Math class.Stage 5: TestingAfter the program is implemented, test it with some sample input data and verify whether the output is correct. Some of the problems may involve many cases, as you will see in later chapters. For these types of problems, you need to design test data that cover all cases.TipIncremental development and testing: The system design phase in this example identified several steps. It is a good approach to developing and testing these steps incrementally by adding them one at a time. This approach makes it much easier to pinpoint problems and debug the program.Page 62Check Point2.25 How would you write the following arithmetic expression? 2.17 Character Data Type and OperationsKey PointA character data type represents a single character.In addition to processing numeric values, you can process characters in Java.Char type: The character data type, char, is used to represent a single character. A character literal is enclosed in single quotation marks. Consider the following code:char letter = 'A';char numChar = '4';The first statement assigns character A to the char variable letter. The second statement assigns digit character 4 to the char variable numChar.CautionA string literal must be enclosed in quotation marks (" ").Char literal: A character literal is a single character enclosed in single quotation marks (' '). Therefore, "A" is a string, but 'A' is a character.2.17.1 Unicode and ASCII codeComputers use binary numbers internally. A character is stored in a computer as a sequence of 0s and 1s.Encoding: Mapping a character to its binary representation is called encoding. There are different ways to encode a character. How characters are encoded is defined by an encoding scheme.Unicode: Java supports Unicode, an encoding scheme established by the Unicode Consortium to support the interchange, processing, and display of written texts in the world’s diverse languages.Original Unicode: Unicode was originally designed as a 16-bit character encoding. The primitive data type char was intended to take advantage of this design by providing a simple data type that could hold any character. However, it turned out that the 65,536 characters possible in a 16-bit encoding are not sufficient to represent all the characters in the world. The Unicode standard therefore has been extended to allow up to 1,112,064 characters.Supplementary Unicode: Those characters that go beyond the original 16-bit limit are called supplementary characters. Java supports the supplementary characters. The processing and representing of supplementary characters are beyond the scope of this book. For simplicity, this book considers only the original 16-bit Unicode characters. These characters can be stored in a char type variable.A 16-bit Unicode takes two bytes, preceded by \u, expressed in four hexadecimal digits that run from \u0000 to \uFFFF. Hexadecimal numbers are introduced in Appendix F, Number Systems. For example, the English word welcome is translated into Chinese using twocharacters, 欢迎. The Unicodes of these two characters are \u6B22\u8FCE.Listing 2.9 gives a program that displays two Chinese characters and three Greek letters.LISTING 2.9 DisplayUnicode.java1  import javax.swing.JOptionPane;2 3  public class DisplayUnicode {4   public static void main(String[] args) {5    JOptionPane.showMessageDialog(null,6     "\u6B22\u8FCE \u03b1 \u03b2 \u03b3",7     "\u6B22\u8FCE Welcome",Page 638    JOptionPane.INFORMATION_MESSAGE);9   }10  } If no Chinese font is installed on your system, you will not be able to see the Chinese characters. The Unicodes for the Greek letters α β γ are \u03b1 \u03b2 \u03b3.ASCII: Most computers use ASCII (American Standard Code for Information Interchange), a 7-bit encoding scheme for representing all uppercase and lowercase letters, digits, punctuation marks, and control characters. Unicode includes ASCII code, with \u0000 to \u007F corresponding to the 128 ASCII characters. (See Appendix B for a list of ASCII characters and their decimal and hexadecimal codes.) You can use ASCII characters such as 'X', '1', and '$' in a Java program as well as Unicodes. Thus, for example, the following statements are equivalent:char letter = 'A';char letter = '\u0041'; // Character A's Unicode is 0041Both statements assign character A to the char variable letter.NoteChar increment and decrement: The increment and decrement operators can also be used on char variables to get the next or preceding Unicode character. For example, the following statements display character b.char ch = 'a';System.out.println(++ch);2.17.2 Escape CharactersSuppose you want to print a message with quotation marks in the output. Can you write a statement like this?System.out.println("He said "Java is fun"");No, this statement has a compile error. The compiler thinks the second quotation character is the end of the string and does not know what to do with the rest of the characters.To overcome this problem, Java uses a special notation to represent special characters, as shown in Table 2.6.Escape character: This special notation, called an escape character, consists of a backslash (\) followed by a character or a character sequence. For example, \t is an escape character for the Tab character and an escape character such as \u03b1 is used to represent a Unicode. The symbols in an escape character are interpreted as a whole rather than individually.So, now you can print the quoted message using the following statement:System.out.println("He said \"Java is fun\"");The output isHe said "Java is fun"Note that the symbols \ and " together represent one character.2.17.3 Casting between char and Numeric TypesA char can be cast into any numeric type, and vice versa. When an integer is cast into a char, only its lower 16 bits of data are used; the other part is ignored. For example:char ch = (char)0XAB0041; // The lower 16 bits hex code 0041 is//assigned to chSystem.out.println(ch); // ch is character APage 64TABLE 2.6 Escape CharactersEscape Character Name Unicode Code Decimal Value\b Backspace \u0008 8\t Tab \u0009 9\n Linefeed \u000A 10\f Formfeed \u000C 12\r Carriage Return \u000D 13\\ Backslash \u005C 92\" Double Quote \u0022 34When a floating-point value is cast into a char, the floating-point value is first cast into an int, which is then cast into a char.char ch = (char)65.25; // Decimal 65 is assigned to chSystem.out.println(ch); // ch is character AWhen a char is cast into a numeric type, the character’s Unicode is cast into the specified numeric type.int i = (int)'A'; // The Unicode of character A is assigned to iSystem.out.println(i); // i is 65Implicit casting can be used if the result of a casting fits into the target variable. Otherwise, explicit casting must be used. For example, since the Unicode of 'a' is 97, which is within the range of a byte, these implicit castings are fine:byte b = 'a'; int i = 'a';But the following casting is incorrect, because the Unicode \uFFF4 cannot fit into a byte:byte b = '\uFFF4';To force this assignment, use explicit casting, as follows:byte b = (byte)'\uFFF4';Any positive integer between 0 and FFFF in hexadecimal can be cast into a character implicitly. Any number not in this range must be cast into a char explicitly.NoteNumeric operators on characters: All numeric operators can be applied to char operands. A char operand is automatically cast into a number if the other operand is a number or a character. If the other operand is a string, the character is concatenated with the string. For example, the following statementsint i = '2' + '3'; // (int)'2' is 50 and (int)'3' is 51 System.out.println("i is " + i); // i is 101Page 65int j = 2 + 'a'; // (int)'a' is 97 System.out.println("j is " + j); // j is 99System.out.println(j + " is the Unicode for character "+ (char)j); // j is the Unicode for character c System.out.println("Chapter " + '2');displayi is 101j is 9999 is the Unicode for character c Chapter 2NoteThe Unicodes for lowercase letters are consecutive integers starting from the Unicode for 'a', then for 'b', 'c', …, and 'z'. The same is true for the uppercase letters. Furthermore, the Unicode for 'a' is greater than the Unicode for 'A', so 'a' - 'A' is the same as 'b' - 'B'. For a lowercase letter ch, its corresponding uppercase letter is (char)('A' + (ch - 'a')).2.17.4 Case Study: Counting Monetary UnitsSuppose you want to develop a program that changes a given amount of money into smaller monetary units. The program lets the user enter an amount as a double value representing a total in dollars and cents, and outputs a report listing the monetary equivalent in the maximum number of dollars, quarters, dimes, nickels, and pennies, in this order, to result in the minimum number of coins, as shown in the sample run.Here are the steps in developing the program:1. Prompt the user to enter the amount as a decimal number, such as 11.56.2. Convert the amount (e.g., 11.56) into cents (1156).3. Divide the cents by 100 to find the number of dollars. Obtain the remaining cents using the cents remainder 100.4. Divide the remaining cents by 25 to find the number of quarters. Obtain the remaining cents using the remaining cents remainder 25.5. Divide the remaining cents by 10 to find the number of dimes. Obtain the remaining cents using the remaining cents remainder 10.6. Divide the remaining cents by 5 to find the number of nickels. Obtain the remaining cents using the remaining cents remainder 5.7. The remaining cents are the pennies.8. Display the result.The complete program is given in Listing 2.10.LISTING 2.10 ComputeChange.java1  import java.util.Scanner;2 3  public class ComputeChange {4   public static void main(String[] args) {5    // Create a Scanner6    Scanner input = new Scanner(System.in);7 8    // Receive the amount9    System.out.print(Page 6610     "Enter an amount, for example, 11.56: ");11    double amount = input.nextDouble();12 13    int remainingAmount = (int)(amount * 100);14 15    // Find the number of one dollars16    int numberOfOneDollars = remainingAmount / 100;17    remainingAmount = remainingAmount % 100;18 19    // Find the number of quarters in the remaining amount20    int numberOfQuarters = remainingAmount / 25;21    remainingAmount = remainingAmount % 25;22 23    // Find the number of dimes in the remaining amount24    int numberOfDimes = remainingAmount / 10;25    remainingAmount = remainingAmount % 10;26 27    // Find the number of nickels in the remaining amount28    int numberOfNickels = remainingAmount / 5;29    remainingAmount = remainingAmount % 5;30 31    // Find the number of pennies in the remaining amount32    int numberOfPennies = remainingAmount;33 34    // Display results35    System.out.println("Your amount " + amount + " consists of \n" +36     "\t" + numberOfOneDollars + " dollars\n" +37     "\t" + numberOfQuarters + " quarters\n" +38     "\t" + numberOfDimes + " dimes\n" +39     "\t" + numberOfNickels + " nickels\n" +40     "\t" + numberOfPennies + " pennies");41   }42  }Side notes:Import class:1 import java.util.Scanner;Enter input:11 double amount = input.nextDouble();Dollars:16 int numberOfOneDollars = remainingAmount / 100;Quarters:20 int numberOfQuarters = remainingAmount / 25;Dimes:24 int numberOfDimes = remainingAmount / 10;Nickels:28 int numberOfNickels = remainingAmount / 5;Pennies:32 int numberOfPennies = remainingAmount;Output:35 System.out.println("Your amount " + amount + " consists of \n" +End side notes.Enter an amount, for example, 11.56: 11.56 [Enter]Your amount 11.56 consists of11 dollars2 quarters0 dimes1 nickels1 pennies line# 11 13 16 17 20 21 24 25 28 29 32variables            amount  11.56          remainingAmount   1156  56  6  6  1 numberOfOneDollars    11        numberOfQuarters      2      numberOfDimes        0    numberOfNickels          1  numberOfPennies            1Page 67The variable amount stores the amount entered from the console (line 11). This variable is not changed, because the amount has to be used at the end of the program to display the results. The program introduces the variable remainingAmount (line 13) to store the changing remaining amount.The variable amount is a double decimal representing dollars and cents. It is converted to an int variable remainingAmount, which represents all the cents. For instance, if amount is 11.56, then the initial remainingAmount is 1156. The division operator yields the integer part of the division, so 1156 / 100 is 11. The remainder operator obtains the remainder of the division, so 1156 % 100 is 56.The program extracts the maximum number of singles from the remaining amount and obtains a new remaining amount in the variable remainingAmount (lines 16–17). It then extracts the maximum number of quarters from remainingAmount and obtains a new remainingAmount (lines 20–21). Continuing the same process, the program finds the maximum number of dimes, nickels, and pennies in the remaining amount.loss of precision: One serious problem with this example is the possible loss of precision when casting a double amount to an int remainingAmount. This could lead to an inaccurate result. If you try to enter the amount 10.03, 10.03 * 100 becomes 1002.9999999999999. You will find that the program displays 10 dollars and 2 pennies. To fix the problem, enter the amount as an integer value representing cents (see Exercise 2.24).As shown in the sample run, 0 dimes, 1 nickels, and 1 pennies are displayed in the result. It would be better not to display 0 dimes, and to display 1 nickel and 1 penny using the singular forms of the words. You will learn how to use selection statements to modify this program in the next chapter (see Exercise 3.7).Check Point2.26 Use print statements to find out the ASCII code for '1', 'A', 'B', 'a', and 'b'. Use print statements to find out the character for the decimal codes 40, 59, 79, 85, and 90. Use print statements to find out the character for the hexadecimal code 40, 5A, 71, 72, and 7A.2.27 Which of the following are correct literals for characters? '1', '\u345dE', '\u3fFa', '\b', '\t'2.28 How do you display the characters \ and "? 2.29 Evaluate the following:int i = '1';int j = '1' + '2' * ('4' - '3') + 'b' / 'a';int k = 'a'; char c = 90;2.30 Can the following conversions involving casting be allowed? If so, find the converted result.char c = 'A'; int i = (int)c;float f = 1000.34f; int i = (int)f;double d = 1000.34; int i = (int)d;int i = 97;char c = (char)i;Page 682.31 Show the output of the following program: public class Test {  public static void main(String[] args) {    char x = 'a';   char y = 'c';   System.out.println(++x);    System.out.println(y++);    System.out.println(x - y);  } }2.18 The String TypeKey PointA string is a sequence of characters.The char type represents only one character. To represent a string of characters, use the data type called String. For example, the following code declares the message to be a string with the value "Welcome to Java".String message = "Welcome to Java";String is a predefined class in the Java library, just like the classes System, JOptionPane, and Scanner. The String type is not a primitive type. It is known as a reference type. Any Java class can be used as a reference type for a variable. Reference data types will be thoroughly discussed in Chapter 8, Objects and Classes. For the time being, you need to know only how to declare a String variable, how to assign a string to the variable, and how to concatenate strings.Concatenate strings and numbers: As first shown in Listing 2.1, two strings can be concatenated. The plus sign (+) is the concatenation operator if one of the operands is a string. If one of the operands is a nonstring (e.g., a number), the nonstring value is converted into a string and concatenated with the other string. Here are some examples:// Three strings are concatenatedString message = "Welcome " + "to " + "Java";// String Chapter is concatenated with number 2 String s = "Chapter" + 2; // s becomes Chapter2// String Supplement is concatenated with character B String s1 = "Supplement" + 'B'; // s1 becomes SupplementBIf neither of the operands is a string, the plus sign (+) is the addition operator that adds two numbers.The augmented += operator can also be used for string concatenation. For example, the following code appends the string "and Java is fun" with the string "Welcome to Java" in message.message += " and Java is fun";So the new message is "Welcome to Java and Java is fun". If i = 1 and j = 2, what is the output of the following statement?System.out.println("i + j is " + i + j);The output is "i + j is 12" because "i + j is " is concatenated with the value of i first. To force i + j to be executed first, enclose i + j in the parentheses, as follows:System.out.println("i + j is " + (i + j )) ;Page 69Read strings: To read a string from the console, invoke the next() method on a Scanner object. For example, the following code reads three strings from the keyboard:Scanner input = new Scanner(System.in);System.out.println("Enter three words separated by spaces: ");String s1 = input.next();String s2 = input.next();String s3 = input.next();System.out.println("s1 is " + s1); System.out.println("s2 is " + s2); System.out.println("s3 is " + s3);Enter three words separated by spaces: Welcome to Java [Enter]s1 is Welcomes2 is tos3 is JavaThe next() method reads a string that ends with a whitespace character.Whitespace character: The characters ' ', \t, \f, \r, or \n are known as whitespace characters.You can use the nextLine() method to read an entire line of text. The nextLine() method reads a string that ends with the Enter key pressed. For example, the following statements read a line of text.Scanner input = new Scanner(System.in);System.out.println("Enter a line: ");String s = input.nextLine();System.out.println("The line entered is " + s);Enter a line: Welcome to Java [Enter]The line entered is Welcome to JavaImportant CautionAvoid input errors: To avoid input errors, do not use nextLine() after nextByte(), nextShort(), nextInt(), nextLong(), nextFloat(), nextDouble(), or next(). The reasons will be explained in Section 14.11.3, “How Does Scanner Work?”Check Point2.32 Show the output of the following statements (write a program to verify your results):System.out.println("1" + 1); System.out.println('1' + 1); System.out.println("1" + 1 + 1); System.out.println("1" + (1 + 1)); System.out.println('1' + 1 + 1);2.33 Evaluate the following expressions (write a program to verify your results):1 + "Welcome " + 1 + 11 + "Welcome " + (1 + 1)1 + "Welcome " + ('\u0001' + 1)1 + "Welcome " + 'a' + 1Page 702.19 Getting Input from Input DialogsKey PointAn input dialog box prompts the user to enter an input graphically. You can obtain input from the console.JOptionPane class: Alternatively, you can obtain input from an input dialog box by invoking the JOptionPane.showInputDialog method, as shown in Figure 2.4. FIGURE 2.4 The input dialog box enables the user to enter a string.When this method is executed, a dialog is displayed to enable you to enter an input value. After entering a string, click OK to accept the input and close the dialog box. The input is returned from the method as a string.ShowInputDialog method: There are several ways to use the showInputDialog method. For the time being, you need to know only two ways to invoke it.One is to use a statement like this one:JOptionPane.showInputDialog(x);where x is a string for the prompting message.The other is to use a statement such as the following:String string = JOptionPane.showInputDialog(null, x, y, JOptionPane.QUESTION_MESSAGE);where x is a string for the prompting message and y is a string for the title of the input dialog box, as shown in the example below. 2.19.1 Converting Strings to NumbersThe input returned from the input dialog box is a string. If you enter a numeric value such as 123, it returns "123". You have to convert a string into a number to obtain the input as a number.Integer.parseInt method: To convert a string into an int value, use the Integer.parseInt method, as follows: int intValue = Integer.parseInt(intString); where intString is a numeric string such as 123.Double.parseDouble method: To convert a string into a double value, use the Double.parseDouble method, as follows: double doubleValue = Double.parseDouble(doubleString);where doubleString is a numeric string such as 123.45.The Integer and Double classes are both included in the java.lang package, and thus they are automatically imported.Page 712.19.2 Using Input Dialog BoxesHaving learned how to read input from an input dialog box, you can rewrite the program in Listing 2.8, ComputeLoan.java, to read from input dialog boxes rather than from the console. Listing 2.11 gives the complete program. Figure 2.5 shows a sample run of the program. FIGURE 2.5 The program accepts the annual interest rate (a), number of years (b), and loan amount (c), then displays the monthly payment and total payment (d).LISTING 2.11 ComputeLoanUsingInputDialog.java1  import javax.swing.JOptionPane;2 3  public class ComputeLoanUsingInputDialog {4   public static void main(String[] args) {5    // Enter annual interest rate6    String annualInterestRateString = JOptionPane.showInputDialog(7     "Enter annual interest rate, for example, 8.25:");8 9    // Convert string to double10    double annualInterestRate =11     Double.parseDouble(annualInterestRateString);12 13    // Obtain monthly interest rate14    double monthlyInterestRate = annualInterestRate / 1200;15 16    // Enter number of years17    String numberOfYearsString = JOptionPane.showInputDialog(18     "Enter number of years as an integer, for example, 5:");19 20    // Convert string to int21    int numberOfYears = Integer.parseInt(numberOfYearsString);22 23    // Enter loan amount24    String loanString = JOptionPane.showInputDialog(25     "Enter loan amount, for example, 120000.95:");26 27    // Convert string to double28    double loanAmount = Double.parseDouble(loanString);29 Page 7230    // Calculate payment31    double monthlyPayment = loanAmount * monthlyInterestRate / (132     - 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));33    double totalPayment = monthlyPayment * numberOfYears * 12;34 35    // Format to keep two digits after the decimal point36    monthlyPayment = (int)(monthlyPayment * 100) / 100.0;37    totalPayment = (int)(totalPayment * 100) / 100.0;38 39    // Display results40    String output = "The monthly payment is $" + monthlyPayment +41     "\nThe total payment is $" + totalPayment;42    JOptionPane.showMessageDialog(null, output );43   }44  }Side notes:Enter interest rate:6 String annualInterestRateString = JOptionPane.showInputDialog(7 "Enter annual interest rate, for example, 8.25:");Convert string to double:10 double annualInterestRate =11 Double.parseDouble(annualInterestRateString);MonthlyPayment:31 double monthlyPayment = loanAmount * monthlyInterestRate / (132 – 1 / Math.pow(1 + monthlyInterestRate, numberOfYears * 12));TotalPayment:33 double totalPayment = monthlyPayment * numberOfYears * 12;Preparing output:36 monthlyPayment = (int)(monthlyPayment * 100) / 100.0;37 totalPayment = (int)(totalPayment * 100) / 100.0;40 String output = "The monthly payment is $" + monthlyPayment +41 "\nThe total payment is $" + totalPayment;42 JOptionPane.showMessageDialog(null, output );End side notes.The showInputDialog method in lines 6–7 displays an input dialog. Enter the interest rate as a double value and click OK to accept the input. The value is returned as a string that is assigned to the String variable annualInterestRateString. The Double.parseDouble (annualInterestRateString) (line 11) is used to convert the string into a double value.Pedagogical NoteJOptionPane or Scanner? For obtaining input you can use either JOptionPane or Scanner—whichever is more convenient. For consistency and simplicity, the examples in this book use Scanner for getting input. You can easily revise the examples using JOptionPane for getting input.Check Point2.34 Why do you have to import JOptionPane but not the Math class? 2.35 How do you prompt the user to enter an input using a dialog box?2.36 How do you convert a string to an integer? How do you convert a string to a double?KEY TERMSalgorithm 34 assignment operator (=) 42 assignment statement 42 byte type 45 casting 56 char type 62 constant 43 data type 35 declare variables 35 decrement operator (--) 54 double type 45 encoding 62 escape character 63 expression 42 final keyword 43 float type 45 floating-point number 35 identifier 40increment operator (++) 54incremental developmentand testing 37int type 45IPO 39literal 48long type 45narrowing (of types) 56operands 46operator 46overflow 45postdecrement 54postincrement 54predecrement 54preincrement 54primitive data type 35pseudocode 34requirements specification 58Page 73scope of a variable 42 short type 45 supplementary Unicode 62 system analysis 58 system design 58 underflow 46Unicode 62UNIX epoch 51 variable 35whitespace character 69 widening (of types) 56CHAPTER SUMMARY1. Identifiers are names for naming elements such as variables, constants, methods, classes, packages in a program.2. An identifier is a sequence of characters that consists of letters, digits, underscores (_), and dollar signs ($). An identifier must start with a letter or an underscore. It cannot start with a digit. An identifier cannot be a reserved word. An identifier can be of any length.3. Variables are used to store data in a program.4. To declare a variable is to tell the compiler what type of data a variable can hold.5. In Java, the equal sign (=) is used as the assignment operator.6. A variable declared in a method must be assigned a value before it can be used.7. A named constant (or simply a constant) represents permanent data that never changes.8. A named constant is declared by using the keyword final.9. Java provides four integer types (byte, short, int, and long) that represent integers of four different sizes.10. Java provides two floating-point types (float and double) that represent floating-point numbers of two different precisions.11. Java provides operators that perform numeric operations: + (addition), – (subtraction), * (multiplication), / (division), and % (remainder).12. Integer arithmetic (/) yields an integer result.13. The numeric operators in a Java expression are applied the same way as in an arithmetic expression.14. Java provides the augmented assignment operators += (addition assignment), –= (subtraction assignment), *= (multiplication assignment), /= (division assignment), and %= (remainder assignment).15. The increment operator (++) and the decrement operator (––) increment or decrement a variable by 1.16. When evaluating an expression with values of mixed types, Java automatically converts the operands to appropriate types.17. You can explicitly convert a value from one type to another using the (type)value notation.Page 7418. Casting a variable of a type with a small range to a variable of a type with a larger range is known as widening a type.19. Casting a variable of a type with a large range to a variable of a type with a smaller range is known as narrowing a type.20. Widening a type can be performed automatically without explicit casting. Narrowing a type must be performed explicitly.21. The character type char represents a single character.22. An escape character is a notation for representing a special character. An escape character consists of a backslash (\) followed by a character or a character sequence.23. The characters ' ', \t, \f, \r, and \n are known as the whitespace characters.24. In computer science, midnight of January 1, 1970, is known as the UNIX epoch.TEST QUESTIONSDo the test questions for this chapter online at www.cs.armstrong.edu/liang/intro9e/test.html.PROGRAMMING EXERCISESNoteSample runs: You can run all exercises by downloading exercise9e.zip from www.cs.armstrong.edu/liang/intro9e/exercise9e.zip and use the command java -cp exercise9e.zip Exercisei_j to run Exercisei_ j. For example, to run Exercise 2.1, usejava -cp exercise9e.zip Exercise02_01 This will give you an idea how the program runs.Debugging TIPLearn from examples: The compiler usually gives a reason for a syntax error. If you don’t know how to correct it, compare your program closely, character by character, with similar examples in the text.Pedagogical NoteDocument analysis and design: Instructors may ask you to document your analysis and design for selected exercises. Use your own words to analyze the problem, including the input, output, and what needs to be computed, and describe how to solve the problem in pseudocode.Sections 2.2–2.122.1 (Convert Celsius to Fahrenheit) Write a program that reads a Celsius degree in a double value from the console, then converts it to Fahrenheit and displays the result. The formula for the conversion is as follows:fahrenheit = (9 / 5) * celsius + 32Hint: In Java, 9 / 5 is 1, but 9.0 / 5 is 1.8. Here is a sample run:Page 75Enter a degree in Celsius: 43 [Enter]43 Celsius is 109.4 Fahrenheit2.2 (Compute the volume of a cylinder) Write a program that reads in the radius and length of a cylinder and computes the area and volume using the following formulas:area = radius * radius * πvolume = area * lengthHere is a sample run:Enter the radius and length of a cylinder: 5.5 12 [Enter]The area is 95.0331 The volume is 1140.42.3 (Convert feet into meters) Write a program that reads a number in feet, converts it to meters, and displays the result. One foot is 0.305 meter. Here is a sample run:Enter a value for feet: 16.5 [Enter]16.5 feet is 5.0325 meters2.4 (Convert pounds into kilograms) Write a program that converts pounds into kilograms. The program prompts the user to enter a number in pounds, converts it to kilograms, and displays the result. One pound is 0.454 kilograms. Here is a sample run:Enter a number in pounds: 55.5 [Enter] 55.5 pounds is 25.197 kilograms*2.5 (Financial application: calculate tips) Write a program that reads the subtotal and the gratuity rate, then computes the gratuity and total. For example, if the user enters 10 for subtotal and 15% for gratuity rate, the program displays $1.5 as gratuity and $11.5 as total. Here is a sample run:Enter the subtotal and a gratuity rate: 10 15 [Enter] The gratuity is $1.5 and total is $11.5**2.6 (Sum the digits in an integer) Write a program that reads an integer between 0 and 1000 and adds all the digits in the integer. For example, if an integer is 932, the sum of all its digits is 14.Hint: Use the % operator to extract digits, and use the / operator to remove the extracted digit. For instance, 932 % 10 = 2 and 932 / 10 = 93.Here is a sample run:Enter a number between 0 and 1000: 999 [Enter]The sum of the digits is 27Page 76*2.7 (Find the number of years) Write a program that prompts the user to enter the minutes (e.g., 1 billion), and displays the number of years and days for theminutes. For simplicity, assume a year has 365 days. Here is a sample run:Enter the number of minutes: 1000000000 [Enter]1000000000 minutes is approximately 1902 years and 214 days*2.8 (Current time) Listing 2.6, ShowCurrentTime.java, gives a program that displays the current time in GMT. Revise the program so that it prompts the user to enter the time zone offset to GMT and displays the time in the specified time zone. Here is a sample run:Enter the time zone offset to GMT: -5 [Enter]The current time is 4:50:342.9 (Physics: acceleration) Average acceleration is defined as the change of velocity divided by the time taken to make the change, as shown in the following formula:Begin math: “a” equals begin fraction “v” subscript one minus v subscript zero over “t” end fraction.End math.Write a program that prompts the user to enter the starting velocity v0 meters/second, the ending velocity v1 in meters/second, and the time span t in seconds, and displays the average acceleration. Here is a sample run:Enter v0, v1, and t: 5.5 50.9 4.5 [Enter]The average acceleration is 10.08892.10 (Science: calculating energy) Write a program that calculates the energy needed to heat water from an initial temperature to a final temperature. Your program should prompt the user to enter the amount of water in kilograms and the initial and final temperatures of the water. The formula to compute the energy isBegin math:Cap Q equals Cap m times open parenthesis finalTemperature minus initialTemperature close parenthesis times four  thousand one hundred and eighty four.End math.where M is the weight of water in kilograms, temperatures are in degrees Celsius, and energy Q is measured in joules. Here is a sample run:Enter the amount of water in kilograms: 55.5 [Enter]Enter the initial temperature: 3.5 [Enter]Enter the final temperature: 10.5 [Enter]The energy needed is 1625484.02.11 (Population projection) Rewrite Exercise 1.11 to prompt the user to enter the number of years and displays the population after the number of years. Here is a sample run of the program:Page 77Enter the number of years: 5 [Enter]The population in 5 years is 3259329702.12 (Physics: finding runway length) Given an airplane’s acceleration a and take-off speed v, you can compute the minimum runway length needed for an airplane to take off using the following formula:Begin math:length equals begin fraction “v” squared over two “a” end fraction.End math.Write a program that prompts the user to enter v in meters/second (m/s) and the acceleration a in meters/second squared (m/s2), and displays the minimum runway length. Here is a sample run:Enter speed and acceleration: 60 3.5 [Enter]The minimum runway length for this airplane is 514.286**2.13 (Financial application: compound value) Suppose you save $100 each month into a savings account with the annual interest rate 5%. Thus, the monthly inter-est rate is 0.05/12 = 0.00417. After the first month, the value in the account becomes100 * (1 + 0.00417) = 100.417After the second month, the value in the account becomes (100 + 100.417) * (1 + 0.00417) = 201.252 After the third month, the value in the account becomes (100 + 201.252) * (1 + 0.00417) = 302.507 and so on.Write a program that prompts the user to enter a monthly saving amount and displays the account value after the sixth month. (In Exercise 4.30, you will use a loop to simplify the code and display the account value for any month.)Enter the monthly saving amount: 100 [Enter]After the sixth month, the account value is $608.81*2.14 (Health application: computing BMI) Body Mass Index (BMI) is a measure of health on weight. It can be calculated by taking your weight in kilograms and dividing by the square of your height in meters. Write a program that prompts the user to enter a weight in pounds and height in inches and displays the BMI. Note that one pound is 0.45359237 kilograms and one inch is 0.0254 meters. Here is a sample run:Page 78Enter weight in pounds: 95.5 [Enter]Enter height in inches: 50 [Enter]BMI is 26.8573*2.15 (Geometry: area of a triangle) Write a program that prompts the user to enter three points (x1, y1), (x2, y2), (x3, y3) of a triangle and displays its area. The formula for computing the area of a triangle isBegin math:s equals open parenthesis side one plus side two plus side three close parenthesis divided by two semicolonarea equals begin square root of “s” open parenthesis “s” minus side one close parenthesis open parenthesis “s” minus side two close parenthesis open parenthesis “s” minus side three close parenthesis end square root.End math.Here is a sample run:Enter three points for a triangle: 1.5 -3.4 4.6 5 9.5 -3.4 [Enter]The area of the triangle is 33.62.16 (Geometry: area of a hexagon) Write a program that prompts the user to enter the side of a hexagon and displays its area. The formula for computing the area of a hexagon is where s is the length of a side. Here is a sample run:Enter the side: 5.5 [Enter]The area of the hexagon is 78.5895*2.17 (Science: wind-chill temperature) How cold is it outside? The temperature alone is not enough to provide the answer. Other factors including wind speed, relative humidity, and sunshine play important roles in determining coldness outside. In 2001, the National Weather Service (NWS) implemented the new wind-chill temperature to measure the coldness using temperature and wind speed. The formula is:Begin math:“t” begin sub “w” “c” end sub equals thirty five point seven four plus sero point six two one five “t” sub “a” end sub minus thirty five point seven five “v” to the power of zero point one six end power plus sero point four two seven five “t” sub “a” end sub “v” to the power of zero point one six end power.End math.where ta is the outside temperature measured in degrees Fahrenheit and v is the speed measured in miles per hour. twc is the wind-chill temperature. The formula cannot be used for wind speeds below 2 mph or temperatures below -58°F or above 41°F.Write a program that prompts the user to enter a temperature between -58°F and 41°F and a wind speed greater than or equal to 2 and displays the wind-chill temperature. Use Math.pow(a, b) to compute v0.16. Here is a sample run:Enter the temperature in Fahrenheit: 5.3 [Enter]Enter the wind speed in miles per hour: 6 [Enter]The wind chill index is -5.56707Page 792.18 (Print a table) Write a program that displays the following table:a b pow(a, b)1 2 12 3 83 4 814 5 10245 6 156252.19 (Geometry: distance of two points) Write a program that prompts the user to enter two points (x1, y1) and (x2, y2) and displays their distance between them.The formula for computing the distance is Begin math:Begin square root open parenthesis “x” sub two minus “x” sub one close parenthesis squared plus open parenthesis “y” sub two minus “y” sub one close parenthesis squared end square root.End math.Note that you can use Math.pow(a, 0.5) to compute the square root of a. Here is a sample run:Enter x1 and y1: 1.5 -3.4 [Enter]Enter x2 and y2: 4 5 [Enter]The distance between the two points is 8.764131445842194Sections 2.13–2.16*2.20 (Financial application: calculate interest) If you know the balance and the annual percentage interest rate, you can compute the interest on the next monthly payment using the following formula:Begin math:interest equals balance times open parenthesis annualInterestRate divided by 1200 close parenthesis.End math.Write a program that reads the balance and the annual percentage interest rate and displays the interest for the next month. Here is a sample run:Enter balance and interest rate (e.g., 3 for 3%): 1000 3.5 [Enter]The interest is 2.91667*2.21 (Financial application: calculate future investment value) Write a program that reads in investment amount, annual interest rate, and number of years, and displays the future investment value using the following formula:Begin math:futureInvestmentValue equals investmentAmount times open parenthesis one plus monthlyInterestRate close parenthesis to the power of numberOfYears times twelve.End math.For example, if you enter amount 1000, annual interest rate 3.25%, and number of years 1, the future investment value is 1032.98.Here is a sample run:Enter investment amount: 1000 "enter key"Enter annual interest rate in percentage: 4.25 "enter key"Enter number of years: 1 "enter key"  Accumulated value is $1043.34Page 80Sections 2.17–2.182.22 (Random character) Write a program that displays a random uppercase letter using the System.CurrentTimeMillis() method.2.23 (Find the character of an ASCII code) Write a program that receives an ASCII code (an integer between 0 and 127) and displays its character. For example, if the user enters 97, the program displays character a. Here is a sample run:Enter an ASCII code: 69 [Enter]The character is E*2.24 (Financial application: monetary units) Rewrite Listing 2.10, ComputeChange.java, to fix the possible loss of accuracy when converting a double value to an int value. Enter the input as an integer whose last two digits represent the cents. For example, the input 1156 represents 11 dollars and 56 cents.*2.25 (Financial application: payroll) Write a program that reads the following information and prints a payroll statement:Employee’s name (e.g., Smith)Number of hours worked in a week (e.g., 10) Hourly pay rate (e.g., 6.75)Federal tax withholding rate (e.g., 20%) State tax withholding rate (e.g., 9%)Enter employee's name: Smith [Enter]Enter number of hours worked in a week: 10 [Enter]Enter hourly pay rate: 6.75 [Enter]Enter federal tax withholding rate: 0.20 [Enter]Enter state tax withholding rate: 0.09 [Enter]Employee Name: SmithHours Worked: 10.0Pay Rate: $6.75Gross Pay: $67.5Deductions:Federal Withholding (20.0%): $13.5State Withholding (9.0%): $6.07Total Deduction: $19.57Net Pay: $47.92Section 2.19*2.26 (Use input dialog) Rewrite Listing 2.10, ComputeChange.java, using input and output dialog boxes.*2.27 (Financial application: payroll) Rewrite Exercise 2.25 using GUI input and output dialog boxes.